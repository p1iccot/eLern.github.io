/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\ndocument.querySelectorAll('._ahv').forEach((elem) => {\r\n\r\n    elem.onmouseenter =\r\n        elem.onmouseleave = (e) => {\r\n            const tolerance = 10\r\n            const left = 0\r\n            const right = elem.clientWidth\r\n            let x = e.pageX - elem.offsetLeft\r\n\r\n            if (x - tolerance < left) x = left\r\n            if (x + tolerance > right) x = right\r\n            elem.style.setProperty('--x', `${x}px`)\r\n        }\r\n})// ====================================================================\r\n\r\ndocument.getElementById('_burgerSTL').onclick = function (e) {\r\n    e.preventDefault;\r\n    this.classList.toggle('_burgerSTL-active');\r\n    let asaide = document.querySelector('.header__menu-asaide');\r\n    asaide.classList.toggle('asaide-active')\r\n\r\n    let navAs = document.querySelector('.asaide__nav');\r\n    navAs.classList.toggle('nav-active');\r\n}\r\n\r\n//==========================================================================\r\nconst popupLinks = document.querySelectorAll('.popup-link');\r\nconst body = document.querySelector('body');\r\nconst lockPadding = document.querySelectorAll('.lock-padding');\r\n\r\nlet unlock = true;\r\n\r\nconst timeout = 800;\r\n\r\nif (popupLinks.length > 0) {\r\n    for (let index = 0; index < popupLinks.length; index++) {\r\n        const popupLink = popupLinks[index];\r\n        popupLink.addEventListener('click', function (e) {\r\n            const popupName = popupLink.getAttribute('href').replace('#', '');\r\n            const curentPopup = document.getElementById(popupName);\r\n            popupOpen(curentPopup);\r\n            e.preventDefault();\r\n        })\r\n    }\r\n}\r\n\r\nconst popupCloseIcon = document.querySelectorAll('.close-popup');\r\nif (popupCloseIcon.length > 0) {\r\n    for (let index = 0; index < popupCloseIcon.length; index++) {\r\n        const el = popupCloseIcon[index];\r\n        el.addEventListener('click', function (e) {\r\n            popupClose(el.closest('.popup'));\r\n            e.preventDefault();\r\n        });\r\n    }\r\n}\r\n\r\nfunction popupOpen(curentPopup) {\r\n    if (curentPopup && unlock) {\r\n        const popupActive = document.querySelector('.popup.open');\r\n        if (popupActive) {\r\n            popupClose(popupActive, false);\r\n        } else {\r\n            bodyLock();\r\n        }\r\n        curentPopup.classList.add('open');\r\n        curentPopup.addEventListener('click', function (e) {\r\n            if (!e.target.closest('.popup__content')) {\r\n                popupClose(e.target.closest('.popup'));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction popupClose(popupActive, doUnlock = true) {\r\n    if (unlock) {\r\n        popupActive.classList.remove('open');\r\n        if (doUnlock) {\r\n            bodyLock();\r\n        }\r\n    }\r\n}\r\n\r\nfunction bodyLock() {\r\n    const lockPaddingValue = window.innerWidth - document.querySelector('.wrapper');\r\n\r\n    if (lockPadding.length > 0) {\r\n        for (let index = 0; index < lockPadding.length; index++) {\r\n            const el = lockPadding[index];\r\n            el.style.paddingRight = lockPaddingValue;\r\n        }\r\n    }\r\n\r\n    body.style.paddingRight = lockPaddingValue;\r\n    body.classList.add('lock');\r\n\r\n    unlock = false;\r\n    setTimeout(function () {\r\n        unlock = true;\r\n    }, timeout);\r\n}\r\n\r\nfunction bodyUnLock() {\r\n\r\n    setTimeout(function () {\r\n        if (lockPadding.length > 0) {\r\n            for (let index = 0; index < lockPadding.length; index++) {\r\n                const el = lockPadding[index];\r\n                el.style.paddingHeight = '0px';\r\n            }\r\n        }\r\n        body.style.paddingRight = '0px';\r\n        body.classList.remove('lock');\r\n\r\n    }, timeout);\r\n\r\n    unlock = false;\r\n    setTimeout(function () {\r\n        unlock = true;\r\n    }, timeout);\r\n}\r\n\r\n\r\nwindow.onkeydown = function () {\r\n    if (event.keyCode == '27') {\r\n        const popupActive = document.querySelector('.popup.open');\r\n        popupClose(popupActive)\r\n    }\r\n}\r\n\r\n$(document).ready(function () {\r\n    $('.slider').slick({\r\n        dots: true,\r\n        arrows: false,\r\n    })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*\r\n         _ _      _       _\r\n     ___| (_) ___| | __  (_)___\r\n    / __| | |/ __| |/ /  | / __|\r\n    \\__ \\ | | (__|   < _ | \\__ \\\r\n    |___/_|_|\\___|_|\\_(_)/ |___/\r\n                       |__/\r\n    \r\n     Version: 1.8.0\r\n      Author: Ken Wheeler\r\n     Website: http://kenwheeler.github.io\r\n        Docs: http://kenwheeler.github.io/slick\r\n        Repo: http://github.com/kenwheeler/slick\r\n      Issues: http://github.com/kenwheeler/slick/issues\r\n    \r\n     */\r\n    /* global window, document, define, jQuery, setInterval, clearInterval */\r\n    ; (function (factory) {\r\n        'use strict';\r\n        if (typeof define === 'function' && define.amd) {\r\n            define(['jquery'], factory);\r\n        } else if (typeof exports !== 'undefined') {\r\n            module.exports = factory(require('jquery'));\r\n        } else {\r\n            factory(jQuery);\r\n        }\r\n\r\n    }(function ($) {\r\n        'use strict';\r\n        var Slick = window.Slick || {};\r\n\r\n        Slick = (function () {\r\n\r\n            var instanceUid = 0;\r\n\r\n            function Slick(element, settings) {\r\n\r\n                var _ = this, dataSettings;\r\n\r\n                _.defaults = {\r\n                    accessibility: true,\r\n                    adaptiveHeight: false,\r\n                    appendArrows: $(element),\r\n                    appendDots: $(element),\r\n                    arrows: true,\r\n                    asNavFor: null,\r\n                    prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\r\n                    nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\r\n                    autoplay: false,\r\n                    autoplaySpeed: 3000,\r\n                    centerMode: false,\r\n                    centerPadding: '50px',\r\n                    cssEase: 'ease',\r\n                    customPaging: function (slider, i) {\r\n                        return $('<button type=\"button\" />').text(i + 1);\r\n                    },\r\n                    dots: false,\r\n                    dotsClass: 'slick-dots',\r\n                    draggable: true,\r\n                    easing: 'linear',\r\n                    edgeFriction: 0.35,\r\n                    fade: false,\r\n                    focusOnSelect: false,\r\n                    focusOnChange: false,\r\n                    infinite: true,\r\n                    initialSlide: 0,\r\n                    lazyLoad: 'ondemand',\r\n                    mobileFirst: false,\r\n                    pauseOnHover: true,\r\n                    pauseOnFocus: true,\r\n                    pauseOnDotsHover: false,\r\n                    respondTo: 'window',\r\n                    responsive: null,\r\n                    rows: 1,\r\n                    rtl: false,\r\n                    slide: '',\r\n                    slidesPerRow: 1,\r\n                    slidesToShow: 1,\r\n                    slidesToScroll: 1,\r\n                    speed: 500,\r\n                    swipe: true,\r\n                    swipeToSlide: false,\r\n                    touchMove: true,\r\n                    touchThreshold: 5,\r\n                    useCSS: true,\r\n                    useTransform: true,\r\n                    variableWidth: false,\r\n                    vertical: false,\r\n                    verticalSwiping: false,\r\n                    waitForAnimate: true,\r\n                    zIndex: 1000\r\n                };\r\n\r\n                _.initials = {\r\n                    animating: false,\r\n                    dragging: false,\r\n                    autoPlayTimer: null,\r\n                    currentDirection: 0,\r\n                    currentLeft: null,\r\n                    currentSlide: 0,\r\n                    direction: 1,\r\n                    $dots: null,\r\n                    listWidth: null,\r\n                    listHeight: null,\r\n                    loadIndex: 0,\r\n                    $nextArrow: null,\r\n                    $prevArrow: null,\r\n                    scrolling: false,\r\n                    slideCount: null,\r\n                    slideWidth: null,\r\n                    $slideTrack: null,\r\n                    $slides: null,\r\n                    sliding: false,\r\n                    slideOffset: 0,\r\n                    swipeLeft: null,\r\n                    swiping: false,\r\n                    $list: null,\r\n                    touchObject: {},\r\n                    transformsEnabled: false,\r\n                    unslicked: false\r\n                };\r\n\r\n                $.extend(_, _.initials);\r\n\r\n                _.activeBreakpoint = null;\r\n                _.animType = null;\r\n                _.animProp = null;\r\n                _.breakpoints = [];\r\n                _.breakpointSettings = [];\r\n                _.cssTransitions = false;\r\n                _.focussed = false;\r\n                _.interrupted = false;\r\n                _.hidden = 'hidden';\r\n                _.paused = true;\r\n                _.positionProp = null;\r\n                _.respondTo = null;\r\n                _.rowCount = 1;\r\n                _.shouldClick = true;\r\n                _.$slider = $(element);\r\n                _.$slidesCache = null;\r\n                _.transformType = null;\r\n                _.transitionType = null;\r\n                _.visibilityChange = 'visibilitychange';\r\n                _.windowWidth = 0;\r\n                _.windowTimer = null;\r\n\r\n                dataSettings = $(element).data('slick') || {};\r\n\r\n                _.options = $.extend({}, _.defaults, settings, dataSettings);\r\n\r\n                _.currentSlide = _.options.initialSlide;\r\n\r\n                _.originalSettings = _.options;\r\n\r\n                if (typeof document.mozHidden !== 'undefined') {\r\n                    _.hidden = 'mozHidden';\r\n                    _.visibilityChange = 'mozvisibilitychange';\r\n                } else if (typeof document.webkitHidden !== 'undefined') {\r\n                    _.hidden = 'webkitHidden';\r\n                    _.visibilityChange = 'webkitvisibilitychange';\r\n                }\r\n\r\n                _.autoPlay = $.proxy(_.autoPlay, _);\r\n                _.autoPlayClear = $.proxy(_.autoPlayClear, _);\r\n                _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\r\n                _.changeSlide = $.proxy(_.changeSlide, _);\r\n                _.clickHandler = $.proxy(_.clickHandler, _);\r\n                _.selectHandler = $.proxy(_.selectHandler, _);\r\n                _.setPosition = $.proxy(_.setPosition, _);\r\n                _.swipeHandler = $.proxy(_.swipeHandler, _);\r\n                _.dragHandler = $.proxy(_.dragHandler, _);\r\n                _.keyHandler = $.proxy(_.keyHandler, _);\r\n\r\n                _.instanceUid = instanceUid++;\r\n\r\n                // A simple way to check for HTML strings\r\n                // Strict HTML recognition (must start with <)\r\n                // Extracted from jQuery v1.11 source\r\n                _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\r\n\r\n\r\n                _.registerBreakpoints();\r\n                _.init(true);\r\n\r\n            }\r\n\r\n            return Slick;\r\n\r\n        }());\r\n\r\n        Slick.prototype.activateADA = function () {\r\n            var _ = this;\r\n\r\n            _.$slideTrack.find('.slick-active').attr({\r\n                'aria-hidden': 'false'\r\n            }).find('a, input, button, select').attr({\r\n                'tabindex': '0'\r\n            });\r\n\r\n        };\r\n\r\n        Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {\r\n\r\n            var _ = this;\r\n\r\n            if (typeof (index) === 'boolean') {\r\n                addBefore = index;\r\n                index = null;\r\n            } else if (index < 0 || (index >= _.slideCount)) {\r\n                return false;\r\n            }\r\n\r\n            _.unload();\r\n\r\n            if (typeof (index) === 'number') {\r\n                if (index === 0 && _.$slides.length === 0) {\r\n                    $(markup).appendTo(_.$slideTrack);\r\n                } else if (addBefore) {\r\n                    $(markup).insertBefore(_.$slides.eq(index));\r\n                } else {\r\n                    $(markup).insertAfter(_.$slides.eq(index));\r\n                }\r\n            } else {\r\n                if (addBefore === true) {\r\n                    $(markup).prependTo(_.$slideTrack);\r\n                } else {\r\n                    $(markup).appendTo(_.$slideTrack);\r\n                }\r\n            }\r\n\r\n            _.$slides = _.$slideTrack.children(this.options.slide);\r\n\r\n            _.$slideTrack.children(this.options.slide).detach();\r\n\r\n            _.$slideTrack.append(_.$slides);\r\n\r\n            _.$slides.each(function (index, element) {\r\n                $(element).attr('data-slick-index', index);\r\n            });\r\n\r\n            _.$slidesCache = _.$slides;\r\n\r\n            _.reinit();\r\n\r\n        };\r\n\r\n        Slick.prototype.animateHeight = function () {\r\n            var _ = this;\r\n            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\r\n                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\r\n                _.$list.animate({\r\n                    height: targetHeight\r\n                }, _.options.speed);\r\n            }\r\n        };\r\n\r\n        Slick.prototype.animateSlide = function (targetLeft, callback) {\r\n\r\n            var animProps = {},\r\n                _ = this;\r\n\r\n            _.animateHeight();\r\n\r\n            if (_.options.rtl === true && _.options.vertical === false) {\r\n                targetLeft = -targetLeft;\r\n            }\r\n            if (_.transformsEnabled === false) {\r\n                if (_.options.vertical === false) {\r\n                    _.$slideTrack.animate({\r\n                        left: targetLeft\r\n                    }, _.options.speed, _.options.easing, callback);\r\n                } else {\r\n                    _.$slideTrack.animate({\r\n                        top: targetLeft\r\n                    }, _.options.speed, _.options.easing, callback);\r\n                }\r\n\r\n            } else {\r\n\r\n                if (_.cssTransitions === false) {\r\n                    if (_.options.rtl === true) {\r\n                        _.currentLeft = -(_.currentLeft);\r\n                    }\r\n                    $({\r\n                        animStart: _.currentLeft\r\n                    }).animate({\r\n                        animStart: targetLeft\r\n                    }, {\r\n                        duration: _.options.speed,\r\n                        easing: _.options.easing,\r\n                        step: function (now) {\r\n                            now = Math.ceil(now);\r\n                            if (_.options.vertical === false) {\r\n                                animProps[_.animType] = 'translate(' +\r\n                                    now + 'px, 0px)';\r\n                                _.$slideTrack.css(animProps);\r\n                            } else {\r\n                                animProps[_.animType] = 'translate(0px,' +\r\n                                    now + 'px)';\r\n                                _.$slideTrack.css(animProps);\r\n                            }\r\n                        },\r\n                        complete: function () {\r\n                            if (callback) {\r\n                                callback.call();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                } else {\r\n\r\n                    _.applyTransition();\r\n                    targetLeft = Math.ceil(targetLeft);\r\n\r\n                    if (_.options.vertical === false) {\r\n                        animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\r\n                    } else {\r\n                        animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\r\n                    }\r\n                    _.$slideTrack.css(animProps);\r\n\r\n                    if (callback) {\r\n                        setTimeout(function () {\r\n\r\n                            _.disableTransition();\r\n\r\n                            callback.call();\r\n                        }, _.options.speed);\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.getNavTarget = function () {\r\n\r\n            var _ = this,\r\n                asNavFor = _.options.asNavFor;\r\n\r\n            if (asNavFor && asNavFor !== null) {\r\n                asNavFor = $(asNavFor).not(_.$slider);\r\n            }\r\n\r\n            return asNavFor;\r\n\r\n        };\r\n\r\n        Slick.prototype.asNavFor = function (index) {\r\n\r\n            var _ = this,\r\n                asNavFor = _.getNavTarget();\r\n\r\n            if (asNavFor !== null && typeof asNavFor === 'object') {\r\n                asNavFor.each(function () {\r\n                    var target = $(this).slick('getSlick');\r\n                    if (!target.unslicked) {\r\n                        target.slideHandler(index, true);\r\n                    }\r\n                });\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.applyTransition = function (slide) {\r\n\r\n            var _ = this,\r\n                transition = {};\r\n\r\n            if (_.options.fade === false) {\r\n                transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\r\n            } else {\r\n                transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\r\n            }\r\n\r\n            if (_.options.fade === false) {\r\n                _.$slideTrack.css(transition);\r\n            } else {\r\n                _.$slides.eq(slide).css(transition);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.autoPlay = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.autoPlayClear();\r\n\r\n            if (_.slideCount > _.options.slidesToShow) {\r\n                _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.autoPlayClear = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.autoPlayTimer) {\r\n                clearInterval(_.autoPlayTimer);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.autoPlayIterator = function () {\r\n\r\n            var _ = this,\r\n                slideTo = _.currentSlide + _.options.slidesToScroll;\r\n\r\n            if (!_.paused && !_.interrupted && !_.focussed) {\r\n\r\n                if (_.options.infinite === false) {\r\n\r\n                    if (_.direction === 1 && (_.currentSlide + 1) === (_.slideCount - 1)) {\r\n                        _.direction = 0;\r\n                    }\r\n\r\n                    else if (_.direction === 0) {\r\n\r\n                        slideTo = _.currentSlide - _.options.slidesToScroll;\r\n\r\n                        if (_.currentSlide - 1 === 0) {\r\n                            _.direction = 1;\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                _.slideHandler(slideTo);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.buildArrows = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.arrows === true) {\r\n\r\n                _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\r\n                _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\r\n\r\n                if (_.slideCount > _.options.slidesToShow) {\r\n\r\n                    _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\r\n                    _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\r\n\r\n                    if (_.htmlExpr.test(_.options.prevArrow)) {\r\n                        _.$prevArrow.prependTo(_.options.appendArrows);\r\n                    }\r\n\r\n                    if (_.htmlExpr.test(_.options.nextArrow)) {\r\n                        _.$nextArrow.appendTo(_.options.appendArrows);\r\n                    }\r\n\r\n                    if (_.options.infinite !== true) {\r\n                        _.$prevArrow\r\n                            .addClass('slick-disabled')\r\n                            .attr('aria-disabled', 'true');\r\n                    }\r\n\r\n                } else {\r\n\r\n                    _.$prevArrow.add(_.$nextArrow)\r\n\r\n                        .addClass('slick-hidden')\r\n                        .attr({\r\n                            'aria-disabled': 'true',\r\n                            'tabindex': '-1'\r\n                        });\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.buildDots = function () {\r\n\r\n            var _ = this,\r\n                i, dot;\r\n\r\n            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n                _.$slider.addClass('slick-dotted');\r\n\r\n                dot = $('<ul />').addClass(_.options.dotsClass);\r\n\r\n                for (i = 0; i <= _.getDotCount(); i += 1) {\r\n                    dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\r\n                }\r\n\r\n                _.$dots = dot.appendTo(_.options.appendDots);\r\n\r\n                _.$dots.find('li').first().addClass('slick-active');\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.buildOut = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.$slides =\r\n                _.$slider\r\n                    .children(_.options.slide + ':not(.slick-cloned)')\r\n                    .addClass('slick-slide');\r\n\r\n            _.slideCount = _.$slides.length;\r\n\r\n            _.$slides.each(function (index, element) {\r\n                $(element)\r\n                    .attr('data-slick-index', index)\r\n                    .data('originalStyling', $(element).attr('style') || '');\r\n            });\r\n\r\n            _.$slider.addClass('slick-slider');\r\n\r\n            _.$slideTrack = (_.slideCount === 0) ?\r\n                $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\r\n                _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\r\n\r\n            _.$list = _.$slideTrack.wrap(\r\n                '<div class=\"slick-list\"/>').parent();\r\n            _.$slideTrack.css('opacity', 0);\r\n\r\n            if (_.options.centerMode === true || _.options.swipeToSlide === true) {\r\n                _.options.slidesToScroll = 1;\r\n            }\r\n\r\n            $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\r\n\r\n            _.setupInfinite();\r\n\r\n            _.buildArrows();\r\n\r\n            _.buildDots();\r\n\r\n            _.updateDots();\r\n\r\n\r\n            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\r\n\r\n            if (_.options.draggable === true) {\r\n                _.$list.addClass('draggable');\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.buildRows = function () {\r\n\r\n            var _ = this, a, b, c, newSlides, numOfSlides, originalSlides, slidesPerSection;\r\n\r\n            newSlides = document.createDocumentFragment();\r\n            originalSlides = _.$slider.children();\r\n\r\n            if (_.options.rows > 0) {\r\n\r\n                slidesPerSection = _.options.slidesPerRow * _.options.rows;\r\n                numOfSlides = Math.ceil(\r\n                    originalSlides.length / slidesPerSection\r\n                );\r\n\r\n                for (a = 0; a < numOfSlides; a++) {\r\n                    var slide = document.createElement('div');\r\n                    for (b = 0; b < _.options.rows; b++) {\r\n                        var row = document.createElement('div');\r\n                        for (c = 0; c < _.options.slidesPerRow; c++) {\r\n                            var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\r\n                            if (originalSlides.get(target)) {\r\n                                row.appendChild(originalSlides.get(target));\r\n                            }\r\n                        }\r\n                        slide.appendChild(row);\r\n                    }\r\n                    newSlides.appendChild(slide);\r\n                }\r\n\r\n                _.$slider.empty().append(newSlides);\r\n                _.$slider.children().children().children()\r\n                    .css({\r\n                        'width': (100 / _.options.slidesPerRow) + '%',\r\n                        'display': 'inline-block'\r\n                    });\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.checkResponsive = function (initial, forceUpdate) {\r\n\r\n            var _ = this,\r\n                breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\r\n            var sliderWidth = _.$slider.width();\r\n            var windowWidth = window.innerWidth || $(window).width();\r\n\r\n            if (_.respondTo === 'window') {\r\n                respondToWidth = windowWidth;\r\n            } else if (_.respondTo === 'slider') {\r\n                respondToWidth = sliderWidth;\r\n            } else if (_.respondTo === 'min') {\r\n                respondToWidth = Math.min(windowWidth, sliderWidth);\r\n            }\r\n\r\n            if (_.options.responsive &&\r\n                _.options.responsive.length &&\r\n                _.options.responsive !== null) {\r\n\r\n                targetBreakpoint = null;\r\n\r\n                for (breakpoint in _.breakpoints) {\r\n                    if (_.breakpoints.hasOwnProperty(breakpoint)) {\r\n                        if (_.originalSettings.mobileFirst === false) {\r\n                            if (respondToWidth < _.breakpoints[breakpoint]) {\r\n                                targetBreakpoint = _.breakpoints[breakpoint];\r\n                            }\r\n                        } else {\r\n                            if (respondToWidth > _.breakpoints[breakpoint]) {\r\n                                targetBreakpoint = _.breakpoints[breakpoint];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (targetBreakpoint !== null) {\r\n                    if (_.activeBreakpoint !== null) {\r\n                        if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\r\n                            _.activeBreakpoint =\r\n                                targetBreakpoint;\r\n                            if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\r\n                                _.unslick(targetBreakpoint);\r\n                            } else {\r\n                                _.options = $.extend({}, _.originalSettings,\r\n                                    _.breakpointSettings[\r\n                                    targetBreakpoint]);\r\n                                if (initial === true) {\r\n                                    _.currentSlide = _.options.initialSlide;\r\n                                }\r\n                                _.refresh(initial);\r\n                            }\r\n                            triggerBreakpoint = targetBreakpoint;\r\n                        }\r\n                    } else {\r\n                        _.activeBreakpoint = targetBreakpoint;\r\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\r\n                            _.unslick(targetBreakpoint);\r\n                        } else {\r\n                            _.options = $.extend({}, _.originalSettings,\r\n                                _.breakpointSettings[\r\n                                targetBreakpoint]);\r\n                            if (initial === true) {\r\n                                _.currentSlide = _.options.initialSlide;\r\n                            }\r\n                            _.refresh(initial);\r\n                        }\r\n                        triggerBreakpoint = targetBreakpoint;\r\n                    }\r\n                } else {\r\n                    if (_.activeBreakpoint !== null) {\r\n                        _.activeBreakpoint = null;\r\n                        _.options = _.originalSettings;\r\n                        if (initial === true) {\r\n                            _.currentSlide = _.options.initialSlide;\r\n                        }\r\n                        _.refresh(initial);\r\n                        triggerBreakpoint = targetBreakpoint;\r\n                    }\r\n                }\r\n\r\n                // only trigger breakpoints during an actual break. not on initialize.\r\n                if (!initial && triggerBreakpoint !== false) {\r\n                    _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.changeSlide = function (event, dontAnimate) {\r\n\r\n            var _ = this,\r\n                $target = $(event.currentTarget),\r\n                indexOffset, slideOffset, unevenOffset;\r\n\r\n            // If target is a link, prevent default action.\r\n            if ($target.is('a')) {\r\n                event.preventDefault();\r\n            }\r\n\r\n            // If target is not the <li> element (ie: a child), find the <li>.\r\n            if (!$target.is('li')) {\r\n                $target = $target.closest('li');\r\n            }\r\n\r\n            unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\r\n            indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\r\n\r\n            switch (event.data.message) {\r\n\r\n                case 'previous':\r\n                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\r\n                    if (_.slideCount > _.options.slidesToShow) {\r\n                        _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\r\n                    }\r\n                    break;\r\n\r\n                case 'next':\r\n                    slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\r\n                    if (_.slideCount > _.options.slidesToShow) {\r\n                        _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\r\n                    }\r\n                    break;\r\n\r\n                case 'index':\r\n                    var index = event.data.index === 0 ? 0 :\r\n                        event.data.index || $target.index() * _.options.slidesToScroll;\r\n\r\n                    _.slideHandler(_.checkNavigable(index), false, dontAnimate);\r\n                    $target.children().trigger('focus');\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.checkNavigable = function (index) {\r\n\r\n            var _ = this,\r\n                navigables, prevNavigable;\r\n\r\n            navigables = _.getNavigableIndexes();\r\n            prevNavigable = 0;\r\n            if (index > navigables[navigables.length - 1]) {\r\n                index = navigables[navigables.length - 1];\r\n            } else {\r\n                for (var n in navigables) {\r\n                    if (index < navigables[n]) {\r\n                        index = prevNavigable;\r\n                        break;\r\n                    }\r\n                    prevNavigable = navigables[n];\r\n                }\r\n            }\r\n\r\n            return index;\r\n        };\r\n\r\n        Slick.prototype.cleanUpEvents = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.dots && _.$dots !== null) {\r\n\r\n                $('li', _.$dots)\r\n                    .off('click.slick', _.changeSlide)\r\n                    .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\r\n                    .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n                if (_.options.accessibility === true) {\r\n                    _.$dots.off('keydown.slick', _.keyHandler);\r\n                }\r\n            }\r\n\r\n            _.$slider.off('focus.slick blur.slick');\r\n\r\n            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n                _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\r\n                _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\r\n\r\n                if (_.options.accessibility === true) {\r\n                    _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\r\n                    _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\r\n                }\r\n            }\r\n\r\n            _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\r\n            _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\r\n            _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\r\n            _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\r\n\r\n            _.$list.off('click.slick', _.clickHandler);\r\n\r\n            $(document).off(_.visibilityChange, _.visibility);\r\n\r\n            _.cleanUpSlideEvents();\r\n\r\n            if (_.options.accessibility === true) {\r\n                _.$list.off('keydown.slick', _.keyHandler);\r\n            }\r\n\r\n            if (_.options.focusOnSelect === true) {\r\n                $(_.$slideTrack).children().off('click.slick', _.selectHandler);\r\n            }\r\n\r\n            $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\r\n\r\n            $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\r\n\r\n            $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\r\n\r\n            $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\r\n\r\n        };\r\n\r\n        Slick.prototype.cleanUpSlideEvents = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\r\n            _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n        };\r\n\r\n        Slick.prototype.cleanUpRows = function () {\r\n\r\n            var _ = this, originalSlides;\r\n\r\n            if (_.options.rows > 0) {\r\n                originalSlides = _.$slides.children().children();\r\n                originalSlides.removeAttr('style');\r\n                _.$slider.empty().append(originalSlides);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.clickHandler = function (event) {\r\n\r\n            var _ = this;\r\n\r\n            if (_.shouldClick === false) {\r\n                event.stopImmediatePropagation();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.destroy = function (refresh) {\r\n\r\n            var _ = this;\r\n\r\n            _.autoPlayClear();\r\n\r\n            _.touchObject = {};\r\n\r\n            _.cleanUpEvents();\r\n\r\n            $('.slick-cloned', _.$slider).detach();\r\n\r\n            if (_.$dots) {\r\n                _.$dots.remove();\r\n            }\r\n\r\n            if (_.$prevArrow && _.$prevArrow.length) {\r\n\r\n                _.$prevArrow\r\n                    .removeClass('slick-disabled slick-arrow slick-hidden')\r\n                    .removeAttr('aria-hidden aria-disabled tabindex')\r\n                    .css('display', '');\r\n\r\n                if (_.htmlExpr.test(_.options.prevArrow)) {\r\n                    _.$prevArrow.remove();\r\n                }\r\n            }\r\n\r\n            if (_.$nextArrow && _.$nextArrow.length) {\r\n\r\n                _.$nextArrow\r\n                    .removeClass('slick-disabled slick-arrow slick-hidden')\r\n                    .removeAttr('aria-hidden aria-disabled tabindex')\r\n                    .css('display', '');\r\n\r\n                if (_.htmlExpr.test(_.options.nextArrow)) {\r\n                    _.$nextArrow.remove();\r\n                }\r\n            }\r\n\r\n\r\n            if (_.$slides) {\r\n\r\n                _.$slides\r\n                    .removeClass('slick-slide slick-active slick-center slick-visible slick-current')\r\n                    .removeAttr('aria-hidden')\r\n                    .removeAttr('data-slick-index')\r\n                    .each(function () {\r\n                        $(this).attr('style', $(this).data('originalStyling'));\r\n                    });\r\n\r\n                _.$slideTrack.children(this.options.slide).detach();\r\n\r\n                _.$slideTrack.detach();\r\n\r\n                _.$list.detach();\r\n\r\n                _.$slider.append(_.$slides);\r\n            }\r\n\r\n            _.cleanUpRows();\r\n\r\n            _.$slider.removeClass('slick-slider');\r\n            _.$slider.removeClass('slick-initialized');\r\n            _.$slider.removeClass('slick-dotted');\r\n\r\n            _.unslicked = true;\r\n\r\n            if (!refresh) {\r\n                _.$slider.trigger('destroy', [_]);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.disableTransition = function (slide) {\r\n\r\n            var _ = this,\r\n                transition = {};\r\n\r\n            transition[_.transitionType] = '';\r\n\r\n            if (_.options.fade === false) {\r\n                _.$slideTrack.css(transition);\r\n            } else {\r\n                _.$slides.eq(slide).css(transition);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.fadeSlide = function (slideIndex, callback) {\r\n\r\n            var _ = this;\r\n\r\n            if (_.cssTransitions === false) {\r\n\r\n                _.$slides.eq(slideIndex).css({\r\n                    zIndex: _.options.zIndex\r\n                });\r\n\r\n                _.$slides.eq(slideIndex).animate({\r\n                    opacity: 1\r\n                }, _.options.speed, _.options.easing, callback);\r\n\r\n            } else {\r\n\r\n                _.applyTransition(slideIndex);\r\n\r\n                _.$slides.eq(slideIndex).css({\r\n                    opacity: 1,\r\n                    zIndex: _.options.zIndex\r\n                });\r\n\r\n                if (callback) {\r\n                    setTimeout(function () {\r\n\r\n                        _.disableTransition(slideIndex);\r\n\r\n                        callback.call();\r\n                    }, _.options.speed);\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.fadeSlideOut = function (slideIndex) {\r\n\r\n            var _ = this;\r\n\r\n            if (_.cssTransitions === false) {\r\n\r\n                _.$slides.eq(slideIndex).animate({\r\n                    opacity: 0,\r\n                    zIndex: _.options.zIndex - 2\r\n                }, _.options.speed, _.options.easing);\r\n\r\n            } else {\r\n\r\n                _.applyTransition(slideIndex);\r\n\r\n                _.$slides.eq(slideIndex).css({\r\n                    opacity: 0,\r\n                    zIndex: _.options.zIndex - 2\r\n                });\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {\r\n\r\n            var _ = this;\r\n\r\n            if (filter !== null) {\r\n\r\n                _.$slidesCache = _.$slides;\r\n\r\n                _.unload();\r\n\r\n                _.$slideTrack.children(this.options.slide).detach();\r\n\r\n                _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\r\n\r\n                _.reinit();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.focusHandler = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.$slider\r\n                .off('focus.slick blur.slick')\r\n                .on('focus.slick blur.slick', '*', function (event) {\r\n\r\n                    event.stopImmediatePropagation();\r\n                    var $sf = $(this);\r\n\r\n                    setTimeout(function () {\r\n\r\n                        if (_.options.pauseOnFocus) {\r\n                            _.focussed = $sf.is(':focus');\r\n                            _.autoPlay();\r\n                        }\r\n\r\n                    }, 0);\r\n\r\n                });\r\n        };\r\n\r\n        Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {\r\n\r\n            var _ = this;\r\n            return _.currentSlide;\r\n\r\n        };\r\n\r\n        Slick.prototype.getDotCount = function () {\r\n\r\n            var _ = this;\r\n\r\n            var breakPoint = 0;\r\n            var counter = 0;\r\n            var pagerQty = 0;\r\n\r\n            if (_.options.infinite === true) {\r\n                if (_.slideCount <= _.options.slidesToShow) {\r\n                    ++pagerQty;\r\n                } else {\r\n                    while (breakPoint < _.slideCount) {\r\n                        ++pagerQty;\r\n                        breakPoint = counter + _.options.slidesToScroll;\r\n                        counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n                    }\r\n                }\r\n            } else if (_.options.centerMode === true) {\r\n                pagerQty = _.slideCount;\r\n            } else if (!_.options.asNavFor) {\r\n                pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\r\n            } else {\r\n                while (breakPoint < _.slideCount) {\r\n                    ++pagerQty;\r\n                    breakPoint = counter + _.options.slidesToScroll;\r\n                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n                }\r\n            }\r\n\r\n            return pagerQty - 1;\r\n\r\n        };\r\n\r\n        Slick.prototype.getLeft = function (slideIndex) {\r\n\r\n            var _ = this,\r\n                targetLeft,\r\n                verticalHeight,\r\n                verticalOffset = 0,\r\n                targetSlide,\r\n                coef;\r\n\r\n            _.slideOffset = 0;\r\n            verticalHeight = _.$slides.first().outerHeight(true);\r\n\r\n            if (_.options.infinite === true) {\r\n                if (_.slideCount > _.options.slidesToShow) {\r\n                    _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\r\n                    coef = -1\r\n\r\n                    if (_.options.vertical === true && _.options.centerMode === true) {\r\n                        if (_.options.slidesToShow === 2) {\r\n                            coef = -1.5;\r\n                        } else if (_.options.slidesToShow === 1) {\r\n                            coef = -2\r\n                        }\r\n                    }\r\n                    verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;\r\n                }\r\n                if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n                    if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\r\n                        if (slideIndex > _.slideCount) {\r\n                            _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\r\n                            verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\r\n                        } else {\r\n                            _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\r\n                            verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                if (slideIndex + _.options.slidesToShow > _.slideCount) {\r\n                    _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\r\n                    verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\r\n                }\r\n            }\r\n\r\n            if (_.slideCount <= _.options.slidesToShow) {\r\n                _.slideOffset = 0;\r\n                verticalOffset = 0;\r\n            }\r\n\r\n            if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\r\n                _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);\r\n            } else if (_.options.centerMode === true && _.options.infinite === true) {\r\n                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\r\n            } else if (_.options.centerMode === true) {\r\n                _.slideOffset = 0;\r\n                _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\r\n            }\r\n\r\n            if (_.options.vertical === false) {\r\n                targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\r\n            } else {\r\n                targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\r\n            }\r\n\r\n            if (_.options.variableWidth === true) {\r\n\r\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\r\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\r\n                } else {\r\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\r\n                }\r\n\r\n                if (_.options.rtl === true) {\r\n                    if (targetSlide[0]) {\r\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\r\n                    } else {\r\n                        targetLeft = 0;\r\n                    }\r\n                } else {\r\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\r\n                }\r\n\r\n                if (_.options.centerMode === true) {\r\n                    if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\r\n                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\r\n                    } else {\r\n                        targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\r\n                    }\r\n\r\n                    if (_.options.rtl === true) {\r\n                        if (targetSlide[0]) {\r\n                            targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\r\n                        } else {\r\n                            targetLeft = 0;\r\n                        }\r\n                    } else {\r\n                        targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\r\n                    }\r\n\r\n                    targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\r\n                }\r\n            }\r\n\r\n            return targetLeft;\r\n\r\n        };\r\n\r\n        Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {\r\n\r\n            var _ = this;\r\n\r\n            return _.options[option];\r\n\r\n        };\r\n\r\n        Slick.prototype.getNavigableIndexes = function () {\r\n\r\n            var _ = this,\r\n                breakPoint = 0,\r\n                counter = 0,\r\n                indexes = [],\r\n                max;\r\n\r\n            if (_.options.infinite === false) {\r\n                max = _.slideCount;\r\n            } else {\r\n                breakPoint = _.options.slidesToScroll * -1;\r\n                counter = _.options.slidesToScroll * -1;\r\n                max = _.slideCount * 2;\r\n            }\r\n\r\n            while (breakPoint < max) {\r\n                indexes.push(breakPoint);\r\n                breakPoint = counter + _.options.slidesToScroll;\r\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\r\n            }\r\n\r\n            return indexes;\r\n\r\n        };\r\n\r\n        Slick.prototype.getSlick = function () {\r\n\r\n            return this;\r\n\r\n        };\r\n\r\n        Slick.prototype.getSlideCount = function () {\r\n\r\n            var _ = this,\r\n                slidesTraversed, swipedSlide, centerOffset;\r\n\r\n            centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\r\n\r\n            if (_.options.swipeToSlide === true) {\r\n                _.$slideTrack.find('.slick-slide').each(function (index, slide) {\r\n                    if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\r\n                        swipedSlide = slide;\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\r\n\r\n                return slidesTraversed;\r\n\r\n            } else {\r\n                return _.options.slidesToScroll;\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {\r\n\r\n            var _ = this;\r\n\r\n            _.changeSlide({\r\n                data: {\r\n                    message: 'index',\r\n                    index: parseInt(slide)\r\n                }\r\n            }, dontAnimate);\r\n\r\n        };\r\n\r\n        Slick.prototype.init = function (creation) {\r\n\r\n            var _ = this;\r\n\r\n            if (!$(_.$slider).hasClass('slick-initialized')) {\r\n\r\n                $(_.$slider).addClass('slick-initialized');\r\n\r\n                _.buildRows();\r\n                _.buildOut();\r\n                _.setProps();\r\n                _.startLoad();\r\n                _.loadSlider();\r\n                _.initializeEvents();\r\n                _.updateArrows();\r\n                _.updateDots();\r\n                _.checkResponsive(true);\r\n                _.focusHandler();\r\n\r\n            }\r\n\r\n            if (creation) {\r\n                _.$slider.trigger('init', [_]);\r\n            }\r\n\r\n            if (_.options.accessibility === true) {\r\n                _.initADA();\r\n            }\r\n\r\n            if (_.options.autoplay) {\r\n\r\n                _.paused = false;\r\n                _.autoPlay();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.initADA = function () {\r\n            var _ = this,\r\n                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\r\n                tabControlIndexes = _.getNavigableIndexes().filter(function (val) {\r\n                    return (val >= 0) && (val < _.slideCount);\r\n                });\r\n\r\n            _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\r\n                'aria-hidden': 'true',\r\n                'tabindex': '-1'\r\n            }).find('a, input, button, select').attr({\r\n                'tabindex': '-1'\r\n            });\r\n\r\n            if (_.$dots !== null) {\r\n                _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {\r\n                    var slideControlIndex = tabControlIndexes.indexOf(i);\r\n\r\n                    $(this).attr({\r\n                        'role': 'tabpanel',\r\n                        'id': 'slick-slide' + _.instanceUid + i,\r\n                        'tabindex': -1\r\n                    });\r\n\r\n                    if (slideControlIndex !== -1) {\r\n                        var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex\r\n                        if ($('#' + ariaButtonControl).length) {\r\n                            $(this).attr({\r\n                                'aria-describedby': ariaButtonControl\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n\r\n                _.$dots.attr('role', 'tablist').find('li').each(function (i) {\r\n                    var mappedSlideIndex = tabControlIndexes[i];\r\n\r\n                    $(this).attr({\r\n                        'role': 'presentation'\r\n                    });\r\n\r\n                    $(this).find('button').first().attr({\r\n                        'role': 'tab',\r\n                        'id': 'slick-slide-control' + _.instanceUid + i,\r\n                        'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\r\n                        'aria-label': (i + 1) + ' of ' + numDotGroups,\r\n                        'aria-selected': null,\r\n                        'tabindex': '-1'\r\n                    });\r\n\r\n                }).eq(_.currentSlide).find('button').attr({\r\n                    'aria-selected': 'true',\r\n                    'tabindex': '0'\r\n                }).end();\r\n            }\r\n\r\n            for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {\r\n                if (_.options.focusOnChange) {\r\n                    _.$slides.eq(i).attr({ 'tabindex': '0' });\r\n                } else {\r\n                    _.$slides.eq(i).removeAttr('tabindex');\r\n                }\r\n            }\r\n\r\n            _.activateADA();\r\n\r\n        };\r\n\r\n        Slick.prototype.initArrowEvents = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n                _.$prevArrow\r\n                    .off('click.slick')\r\n                    .on('click.slick', {\r\n                        message: 'previous'\r\n                    }, _.changeSlide);\r\n                _.$nextArrow\r\n                    .off('click.slick')\r\n                    .on('click.slick', {\r\n                        message: 'next'\r\n                    }, _.changeSlide);\r\n\r\n                if (_.options.accessibility === true) {\r\n                    _.$prevArrow.on('keydown.slick', _.keyHandler);\r\n                    _.$nextArrow.on('keydown.slick', _.keyHandler);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.initDotEvents = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n                $('li', _.$dots).on('click.slick', {\r\n                    message: 'index'\r\n                }, _.changeSlide);\r\n\r\n                if (_.options.accessibility === true) {\r\n                    _.$dots.on('keydown.slick', _.keyHandler);\r\n                }\r\n            }\r\n\r\n            if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n                $('li', _.$dots)\r\n                    .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\r\n                    .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.initSlideEvents = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.pauseOnHover) {\r\n\r\n                _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\r\n                _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.initializeEvents = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.initArrowEvents();\r\n\r\n            _.initDotEvents();\r\n            _.initSlideEvents();\r\n\r\n            _.$list.on('touchstart.slick mousedown.slick', {\r\n                action: 'start'\r\n            }, _.swipeHandler);\r\n            _.$list.on('touchmove.slick mousemove.slick', {\r\n                action: 'move'\r\n            }, _.swipeHandler);\r\n            _.$list.on('touchend.slick mouseup.slick', {\r\n                action: 'end'\r\n            }, _.swipeHandler);\r\n            _.$list.on('touchcancel.slick mouseleave.slick', {\r\n                action: 'end'\r\n            }, _.swipeHandler);\r\n\r\n            _.$list.on('click.slick', _.clickHandler);\r\n\r\n            $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\r\n\r\n            if (_.options.accessibility === true) {\r\n                _.$list.on('keydown.slick', _.keyHandler);\r\n            }\r\n\r\n            if (_.options.focusOnSelect === true) {\r\n                $(_.$slideTrack).children().on('click.slick', _.selectHandler);\r\n            }\r\n\r\n            $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\r\n\r\n            $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\r\n\r\n            $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\r\n\r\n            $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\r\n            $(_.setPosition);\r\n\r\n        };\r\n\r\n        Slick.prototype.initUI = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n                _.$prevArrow.show();\r\n                _.$nextArrow.show();\r\n\r\n            }\r\n\r\n            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n                _.$dots.show();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.keyHandler = function (event) {\r\n\r\n            var _ = this;\r\n            //Dont slide if the cursor is inside the form fields and arrow keys are pressed\r\n            if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\r\n                if (event.keyCode === 37 && _.options.accessibility === true) {\r\n                    _.changeSlide({\r\n                        data: {\r\n                            message: _.options.rtl === true ? 'next' : 'previous'\r\n                        }\r\n                    });\r\n                } else if (event.keyCode === 39 && _.options.accessibility === true) {\r\n                    _.changeSlide({\r\n                        data: {\r\n                            message: _.options.rtl === true ? 'previous' : 'next'\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.lazyLoad = function () {\r\n\r\n            var _ = this,\r\n                loadRange, cloneRange, rangeStart, rangeEnd;\r\n\r\n            function loadImages(imagesScope) {\r\n\r\n                $('img[data-lazy]', imagesScope).each(function () {\r\n\r\n                    var image = $(this),\r\n                        imageSource = $(this).attr('data-lazy'),\r\n                        imageSrcSet = $(this).attr('data-srcset'),\r\n                        imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\r\n                        imageToLoad = document.createElement('img');\r\n\r\n                    imageToLoad.onload = function () {\r\n\r\n                        image\r\n                            .animate({ opacity: 0 }, 100, function () {\r\n\r\n                                if (imageSrcSet) {\r\n                                    image\r\n                                        .attr('srcset', imageSrcSet);\r\n\r\n                                    if (imageSizes) {\r\n                                        image\r\n                                            .attr('sizes', imageSizes);\r\n                                    }\r\n                                }\r\n\r\n                                image\r\n                                    .attr('src', imageSource)\r\n                                    .animate({ opacity: 1 }, 200, function () {\r\n                                        image\r\n                                            .removeAttr('data-lazy data-srcset data-sizes')\r\n                                            .removeClass('slick-loading');\r\n                                    });\r\n                                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\r\n                            });\r\n\r\n                    };\r\n\r\n                    imageToLoad.onerror = function () {\r\n\r\n                        image\r\n                            .removeAttr('data-lazy')\r\n                            .removeClass('slick-loading')\r\n                            .addClass('slick-lazyload-error');\r\n\r\n                        _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\r\n\r\n                    };\r\n\r\n                    imageToLoad.src = imageSource;\r\n\r\n                });\r\n\r\n            }\r\n\r\n            if (_.options.centerMode === true) {\r\n                if (_.options.infinite === true) {\r\n                    rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\r\n                    rangeEnd = rangeStart + _.options.slidesToShow + 2;\r\n                } else {\r\n                    rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\r\n                    rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\r\n                }\r\n            } else {\r\n                rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\r\n                rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\r\n                if (_.options.fade === true) {\r\n                    if (rangeStart > 0) rangeStart--;\r\n                    if (rangeEnd <= _.slideCount) rangeEnd++;\r\n                }\r\n            }\r\n\r\n            loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\r\n\r\n            if (_.options.lazyLoad === 'anticipated') {\r\n                var prevSlide = rangeStart - 1,\r\n                    nextSlide = rangeEnd,\r\n                    $slides = _.$slider.find('.slick-slide');\r\n\r\n                for (var i = 0; i < _.options.slidesToScroll; i++) {\r\n                    if (prevSlide < 0) prevSlide = _.slideCount - 1;\r\n                    loadRange = loadRange.add($slides.eq(prevSlide));\r\n                    loadRange = loadRange.add($slides.eq(nextSlide));\r\n                    prevSlide--;\r\n                    nextSlide++;\r\n                }\r\n            }\r\n\r\n            loadImages(loadRange);\r\n\r\n            if (_.slideCount <= _.options.slidesToShow) {\r\n                cloneRange = _.$slider.find('.slick-slide');\r\n                loadImages(cloneRange);\r\n            } else\r\n                if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\r\n                    cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\r\n                    loadImages(cloneRange);\r\n                } else if (_.currentSlide === 0) {\r\n                    cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\r\n                    loadImages(cloneRange);\r\n                }\r\n\r\n        };\r\n\r\n        Slick.prototype.loadSlider = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.setPosition();\r\n\r\n            _.$slideTrack.css({\r\n                opacity: 1\r\n            });\r\n\r\n            _.$slider.removeClass('slick-loading');\r\n\r\n            _.initUI();\r\n\r\n            if (_.options.lazyLoad === 'progressive') {\r\n                _.progressiveLazyLoad();\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.next = Slick.prototype.slickNext = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.changeSlide({\r\n                data: {\r\n                    message: 'next'\r\n                }\r\n            });\r\n\r\n        };\r\n\r\n        Slick.prototype.orientationChange = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.checkResponsive();\r\n            _.setPosition();\r\n\r\n        };\r\n\r\n        Slick.prototype.pause = Slick.prototype.slickPause = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.autoPlayClear();\r\n            _.paused = true;\r\n\r\n        };\r\n\r\n        Slick.prototype.play = Slick.prototype.slickPlay = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.autoPlay();\r\n            _.options.autoplay = true;\r\n            _.paused = false;\r\n            _.focussed = false;\r\n            _.interrupted = false;\r\n\r\n        };\r\n\r\n        Slick.prototype.postSlide = function (index) {\r\n\r\n            var _ = this;\r\n\r\n            if (!_.unslicked) {\r\n\r\n                _.$slider.trigger('afterChange', [_, index]);\r\n\r\n                _.animating = false;\r\n\r\n                if (_.slideCount > _.options.slidesToShow) {\r\n                    _.setPosition();\r\n                }\r\n\r\n                _.swipeLeft = null;\r\n\r\n                if (_.options.autoplay) {\r\n                    _.autoPlay();\r\n                }\r\n\r\n                if (_.options.accessibility === true) {\r\n                    _.initADA();\r\n\r\n                    if (_.options.focusOnChange) {\r\n                        var $currentSlide = $(_.$slides.get(_.currentSlide));\r\n                        $currentSlide.attr('tabindex', 0).focus();\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.prev = Slick.prototype.slickPrev = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.changeSlide({\r\n                data: {\r\n                    message: 'previous'\r\n                }\r\n            });\r\n\r\n        };\r\n\r\n        Slick.prototype.preventDefault = function (event) {\r\n\r\n            event.preventDefault();\r\n\r\n        };\r\n\r\n        Slick.prototype.progressiveLazyLoad = function (tryCount) {\r\n\r\n            tryCount = tryCount || 1;\r\n\r\n            var _ = this,\r\n                $imgsToLoad = $('img[data-lazy]', _.$slider),\r\n                image,\r\n                imageSource,\r\n                imageSrcSet,\r\n                imageSizes,\r\n                imageToLoad;\r\n\r\n            if ($imgsToLoad.length) {\r\n\r\n                image = $imgsToLoad.first();\r\n                imageSource = image.attr('data-lazy');\r\n                imageSrcSet = image.attr('data-srcset');\r\n                imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');\r\n                imageToLoad = document.createElement('img');\r\n\r\n                imageToLoad.onload = function () {\r\n\r\n                    if (imageSrcSet) {\r\n                        image\r\n                            .attr('srcset', imageSrcSet);\r\n\r\n                        if (imageSizes) {\r\n                            image\r\n                                .attr('sizes', imageSizes);\r\n                        }\r\n                    }\r\n\r\n                    image\r\n                        .attr('src', imageSource)\r\n                        .removeAttr('data-lazy data-srcset data-sizes')\r\n                        .removeClass('slick-loading');\r\n\r\n                    if (_.options.adaptiveHeight === true) {\r\n                        _.setPosition();\r\n                    }\r\n\r\n                    _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\r\n                    _.progressiveLazyLoad();\r\n\r\n                };\r\n\r\n                imageToLoad.onerror = function () {\r\n\r\n                    if (tryCount < 3) {\r\n\r\n                        /**\r\n                         * try to load the image 3 times,\r\n                         * leave a slight delay so we don't get\r\n                         * servers blocking the request.\r\n                         */\r\n                        setTimeout(function () {\r\n                            _.progressiveLazyLoad(tryCount + 1);\r\n                        }, 500);\r\n\r\n                    } else {\r\n\r\n                        image\r\n                            .removeAttr('data-lazy')\r\n                            .removeClass('slick-loading')\r\n                            .addClass('slick-lazyload-error');\r\n\r\n                        _.$slider.trigger('lazyLoadError', [_, image, imageSource]);\r\n\r\n                        _.progressiveLazyLoad();\r\n\r\n                    }\r\n\r\n                };\r\n\r\n                imageToLoad.src = imageSource;\r\n\r\n            } else {\r\n\r\n                _.$slider.trigger('allImagesLoaded', [_]);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.refresh = function (initializing) {\r\n\r\n            var _ = this, currentSlide, lastVisibleIndex;\r\n\r\n            lastVisibleIndex = _.slideCount - _.options.slidesToShow;\r\n\r\n            // in non-infinite sliders, we don't want to go past the\r\n            // last visible index.\r\n            if (!_.options.infinite && (_.currentSlide > lastVisibleIndex)) {\r\n                _.currentSlide = lastVisibleIndex;\r\n            }\r\n\r\n            // if less slides than to show, go to start.\r\n            if (_.slideCount <= _.options.slidesToShow) {\r\n                _.currentSlide = 0;\r\n\r\n            }\r\n\r\n            currentSlide = _.currentSlide;\r\n\r\n            _.destroy(true);\r\n\r\n            $.extend(_, _.initials, { currentSlide: currentSlide });\r\n\r\n            _.init();\r\n\r\n            if (!initializing) {\r\n\r\n                _.changeSlide({\r\n                    data: {\r\n                        message: 'index',\r\n                        index: currentSlide\r\n                    }\r\n                }, false);\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.registerBreakpoints = function () {\r\n\r\n            var _ = this, breakpoint, currentBreakpoint, l,\r\n                responsiveSettings = _.options.responsive || null;\r\n\r\n            if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {\r\n\r\n                _.respondTo = _.options.respondTo || 'window';\r\n\r\n                for (breakpoint in responsiveSettings) {\r\n\r\n                    l = _.breakpoints.length - 1;\r\n\r\n                    if (responsiveSettings.hasOwnProperty(breakpoint)) {\r\n                        currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\r\n\r\n                        // loop through the breakpoints and cut out any existing\r\n                        // ones with the same breakpoint number, we don't want dupes.\r\n                        while (l >= 0) {\r\n                            if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {\r\n                                _.breakpoints.splice(l, 1);\r\n                            }\r\n                            l--;\r\n                        }\r\n\r\n                        _.breakpoints.push(currentBreakpoint);\r\n                        _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                _.breakpoints.sort(function (a, b) {\r\n                    return (_.options.mobileFirst) ? a - b : b - a;\r\n                });\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.reinit = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.$slides =\r\n                _.$slideTrack\r\n                    .children(_.options.slide)\r\n                    .addClass('slick-slide');\r\n\r\n            _.slideCount = _.$slides.length;\r\n\r\n            if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\r\n                _.currentSlide = _.currentSlide - _.options.slidesToScroll;\r\n            }\r\n\r\n            if (_.slideCount <= _.options.slidesToShow) {\r\n                _.currentSlide = 0;\r\n            }\r\n\r\n            _.registerBreakpoints();\r\n\r\n            _.setProps();\r\n            _.setupInfinite();\r\n            _.buildArrows();\r\n            _.updateArrows();\r\n            _.initArrowEvents();\r\n            _.buildDots();\r\n            _.updateDots();\r\n            _.initDotEvents();\r\n            _.cleanUpSlideEvents();\r\n            _.initSlideEvents();\r\n\r\n            _.checkResponsive(false, true);\r\n\r\n            if (_.options.focusOnSelect === true) {\r\n                $(_.$slideTrack).children().on('click.slick', _.selectHandler);\r\n            }\r\n\r\n            _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\r\n\r\n            _.setPosition();\r\n            _.focusHandler();\r\n\r\n            _.paused = !_.options.autoplay;\r\n            _.autoPlay();\r\n\r\n            _.$slider.trigger('reInit', [_]);\r\n\r\n        };\r\n\r\n        Slick.prototype.resize = function () {\r\n\r\n            var _ = this;\r\n\r\n            if ($(window).width() !== _.windowWidth) {\r\n                clearTimeout(_.windowDelay);\r\n                _.windowDelay = window.setTimeout(function () {\r\n                    _.windowWidth = $(window).width();\r\n                    _.checkResponsive();\r\n                    if (!_.unslicked) { _.setPosition(); }\r\n                }, 50);\r\n            }\r\n        };\r\n\r\n        Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {\r\n\r\n            var _ = this;\r\n\r\n            if (typeof (index) === 'boolean') {\r\n                removeBefore = index;\r\n                index = removeBefore === true ? 0 : _.slideCount - 1;\r\n            } else {\r\n                index = removeBefore === true ? --index : index;\r\n            }\r\n\r\n            if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\r\n                return false;\r\n            }\r\n\r\n            _.unload();\r\n\r\n            if (removeAll === true) {\r\n                _.$slideTrack.children().remove();\r\n            } else {\r\n                _.$slideTrack.children(this.options.slide).eq(index).remove();\r\n            }\r\n\r\n            _.$slides = _.$slideTrack.children(this.options.slide);\r\n\r\n            _.$slideTrack.children(this.options.slide).detach();\r\n\r\n            _.$slideTrack.append(_.$slides);\r\n\r\n            _.$slidesCache = _.$slides;\r\n\r\n            _.reinit();\r\n\r\n        };\r\n\r\n        Slick.prototype.setCSS = function (position) {\r\n\r\n            var _ = this,\r\n                positionProps = {},\r\n                x, y;\r\n\r\n            if (_.options.rtl === true) {\r\n                position = -position;\r\n            }\r\n            x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\r\n            y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\r\n\r\n            positionProps[_.positionProp] = position;\r\n\r\n            if (_.transformsEnabled === false) {\r\n                _.$slideTrack.css(positionProps);\r\n            } else {\r\n                positionProps = {};\r\n                if (_.cssTransitions === false) {\r\n                    positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\r\n                    _.$slideTrack.css(positionProps);\r\n                } else {\r\n                    positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\r\n                    _.$slideTrack.css(positionProps);\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.setDimensions = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.vertical === false) {\r\n                if (_.options.centerMode === true) {\r\n                    _.$list.css({\r\n                        padding: ('0px ' + _.options.centerPadding)\r\n                    });\r\n                }\r\n            } else {\r\n                _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\r\n                if (_.options.centerMode === true) {\r\n                    _.$list.css({\r\n                        padding: (_.options.centerPadding + ' 0px')\r\n                    });\r\n                }\r\n            }\r\n\r\n            _.listWidth = _.$list.width();\r\n            _.listHeight = _.$list.height();\r\n\r\n\r\n            if (_.options.vertical === false && _.options.variableWidth === false) {\r\n                _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\r\n                _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\r\n\r\n            } else if (_.options.variableWidth === true) {\r\n                _.$slideTrack.width(5000 * _.slideCount);\r\n            } else {\r\n                _.slideWidth = Math.ceil(_.listWidth);\r\n                _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\r\n            }\r\n\r\n            var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\r\n            if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\r\n\r\n        };\r\n\r\n        Slick.prototype.setFade = function () {\r\n\r\n            var _ = this,\r\n                targetLeft;\r\n\r\n            _.$slides.each(function (index, element) {\r\n                targetLeft = (_.slideWidth * index) * -1;\r\n                if (_.options.rtl === true) {\r\n                    $(element).css({\r\n                        position: 'relative',\r\n                        right: targetLeft,\r\n                        top: 0,\r\n                        zIndex: _.options.zIndex - 2,\r\n                        opacity: 0\r\n                    });\r\n                } else {\r\n                    $(element).css({\r\n                        position: 'relative',\r\n                        left: targetLeft,\r\n                        top: 0,\r\n                        zIndex: _.options.zIndex - 2,\r\n                        opacity: 0\r\n                    });\r\n                }\r\n            });\r\n\r\n            _.$slides.eq(_.currentSlide).css({\r\n                zIndex: _.options.zIndex - 1,\r\n                opacity: 1\r\n            });\r\n\r\n        };\r\n\r\n        Slick.prototype.setHeight = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\r\n                var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\r\n                _.$list.css('height', targetHeight);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.setOption =\r\n            Slick.prototype.slickSetOption = function () {\r\n\r\n                /**\r\n                 * accepts arguments in format of:\r\n                 *\r\n                 *  - for changing a single option's value:\r\n                 *     .slick(\"setOption\", option, value, refresh )\r\n                 *\r\n                 *  - for changing a set of responsive options:\r\n                 *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\r\n                 *\r\n                 *  - for updating multiple values at once (not responsive)\r\n                 *     .slick(\"setOption\", { 'option': value, ... }, refresh )\r\n                 */\r\n\r\n                var _ = this, l, item, option, value, refresh = false, type;\r\n\r\n                if ($.type(arguments[0]) === 'object') {\r\n\r\n                    option = arguments[0];\r\n                    refresh = arguments[1];\r\n                    type = 'multiple';\r\n\r\n                } else if ($.type(arguments[0]) === 'string') {\r\n\r\n                    option = arguments[0];\r\n                    value = arguments[1];\r\n                    refresh = arguments[2];\r\n\r\n                    if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {\r\n\r\n                        type = 'responsive';\r\n\r\n                    } else if (typeof arguments[1] !== 'undefined') {\r\n\r\n                        type = 'single';\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                if (type === 'single') {\r\n\r\n                    _.options[option] = value;\r\n\r\n\r\n                } else if (type === 'multiple') {\r\n\r\n                    $.each(option, function (opt, val) {\r\n\r\n                        _.options[opt] = val;\r\n\r\n                    });\r\n\r\n\r\n                } else if (type === 'responsive') {\r\n\r\n                    for (item in value) {\r\n\r\n                        if ($.type(_.options.responsive) !== 'array') {\r\n\r\n                            _.options.responsive = [value[item]];\r\n\r\n                        } else {\r\n\r\n                            l = _.options.responsive.length - 1;\r\n\r\n                            // loop through the responsive object and splice out duplicates.\r\n                            while (l >= 0) {\r\n\r\n                                if (_.options.responsive[l].breakpoint === value[item].breakpoint) {\r\n\r\n                                    _.options.responsive.splice(l, 1);\r\n\r\n                                }\r\n\r\n                                l--;\r\n\r\n                            }\r\n\r\n                            _.options.responsive.push(value[item]);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                if (refresh) {\r\n\r\n                    _.unload();\r\n                    _.reinit();\r\n\r\n                }\r\n\r\n            };\r\n\r\n        Slick.prototype.setPosition = function () {\r\n\r\n            var _ = this;\r\n\r\n            _.setDimensions();\r\n\r\n            _.setHeight();\r\n\r\n            if (_.options.fade === false) {\r\n                _.setCSS(_.getLeft(_.currentSlide));\r\n            } else {\r\n                _.setFade();\r\n            }\r\n\r\n            _.$slider.trigger('setPosition', [_]);\r\n\r\n        };\r\n\r\n        Slick.prototype.setProps = function () {\r\n\r\n            var _ = this,\r\n                bodyStyle = document.body.style;\r\n\r\n            _.positionProp = _.options.vertical === true ? 'top' : 'left';\r\n\r\n            if (_.positionProp === 'top') {\r\n                _.$slider.addClass('slick-vertical');\r\n            } else {\r\n                _.$slider.removeClass('slick-vertical');\r\n            }\r\n\r\n            if (bodyStyle.WebkitTransition !== undefined ||\r\n                bodyStyle.MozTransition !== undefined ||\r\n                bodyStyle.msTransition !== undefined) {\r\n                if (_.options.useCSS === true) {\r\n                    _.cssTransitions = true;\r\n                }\r\n            }\r\n\r\n            if (_.options.fade) {\r\n                if (typeof _.options.zIndex === 'number') {\r\n                    if (_.options.zIndex < 3) {\r\n                        _.options.zIndex = 3;\r\n                    }\r\n                } else {\r\n                    _.options.zIndex = _.defaults.zIndex;\r\n                }\r\n            }\r\n\r\n            if (bodyStyle.OTransform !== undefined) {\r\n                _.animType = 'OTransform';\r\n                _.transformType = '-o-transform';\r\n                _.transitionType = 'OTransition';\r\n                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\r\n            }\r\n            if (bodyStyle.MozTransform !== undefined) {\r\n                _.animType = 'MozTransform';\r\n                _.transformType = '-moz-transform';\r\n                _.transitionType = 'MozTransition';\r\n                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\r\n            }\r\n            if (bodyStyle.webkitTransform !== undefined) {\r\n                _.animType = 'webkitTransform';\r\n                _.transformType = '-webkit-transform';\r\n                _.transitionType = 'webkitTransition';\r\n                if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\r\n            }\r\n            if (bodyStyle.msTransform !== undefined) {\r\n                _.animType = 'msTransform';\r\n                _.transformType = '-ms-transform';\r\n                _.transitionType = 'msTransition';\r\n                if (bodyStyle.msTransform === undefined) _.animType = false;\r\n            }\r\n            if (bodyStyle.transform !== undefined && _.animType !== false) {\r\n                _.animType = 'transform';\r\n                _.transformType = 'transform';\r\n                _.transitionType = 'transition';\r\n            }\r\n            _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\r\n        };\r\n\r\n\r\n        Slick.prototype.setSlideClasses = function (index) {\r\n\r\n            var _ = this,\r\n                centerOffset, allSlides, indexOffset, remainder;\r\n\r\n            allSlides = _.$slider\r\n                .find('.slick-slide')\r\n                .removeClass('slick-active slick-center slick-current')\r\n                .attr('aria-hidden', 'true');\r\n\r\n            _.$slides\r\n                .eq(index)\r\n                .addClass('slick-current');\r\n\r\n            if (_.options.centerMode === true) {\r\n\r\n                var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\r\n\r\n                centerOffset = Math.floor(_.options.slidesToShow / 2);\r\n\r\n                if (_.options.infinite === true) {\r\n\r\n                    if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\r\n                        _.$slides\r\n                            .slice(index - centerOffset + evenCoef, index + centerOffset + 1)\r\n                            .addClass('slick-active')\r\n                            .attr('aria-hidden', 'false');\r\n\r\n                    } else {\r\n\r\n                        indexOffset = _.options.slidesToShow + index;\r\n                        allSlides\r\n                            .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)\r\n                            .addClass('slick-active')\r\n                            .attr('aria-hidden', 'false');\r\n\r\n                    }\r\n\r\n                    if (index === 0) {\r\n\r\n                        allSlides\r\n                            .eq(allSlides.length - 1 - _.options.slidesToShow)\r\n                            .addClass('slick-center');\r\n\r\n                    } else if (index === _.slideCount - 1) {\r\n\r\n                        allSlides\r\n                            .eq(_.options.slidesToShow)\r\n                            .addClass('slick-center');\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                _.$slides\r\n                    .eq(index)\r\n                    .addClass('slick-center');\r\n\r\n            } else {\r\n\r\n                if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\r\n\r\n                    _.$slides\r\n                        .slice(index, index + _.options.slidesToShow)\r\n                        .addClass('slick-active')\r\n                        .attr('aria-hidden', 'false');\r\n\r\n                } else if (allSlides.length <= _.options.slidesToShow) {\r\n\r\n                    allSlides\r\n                        .addClass('slick-active')\r\n                        .attr('aria-hidden', 'false');\r\n\r\n                } else {\r\n\r\n                    remainder = _.slideCount % _.options.slidesToShow;\r\n                    indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\r\n\r\n                    if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\r\n\r\n                        allSlides\r\n                            .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\r\n                            .addClass('slick-active')\r\n                            .attr('aria-hidden', 'false');\r\n\r\n                    } else {\r\n\r\n                        allSlides\r\n                            .slice(indexOffset, indexOffset + _.options.slidesToShow)\r\n                            .addClass('slick-active')\r\n                            .attr('aria-hidden', 'false');\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\r\n                _.lazyLoad();\r\n            }\r\n        };\r\n\r\n        Slick.prototype.setupInfinite = function () {\r\n\r\n            var _ = this,\r\n                i, slideIndex, infiniteCount;\r\n\r\n            if (_.options.fade === true) {\r\n                _.options.centerMode = false;\r\n            }\r\n\r\n            if (_.options.infinite === true && _.options.fade === false) {\r\n\r\n                slideIndex = null;\r\n\r\n                if (_.slideCount > _.options.slidesToShow) {\r\n\r\n                    if (_.options.centerMode === true) {\r\n                        infiniteCount = _.options.slidesToShow + 1;\r\n                    } else {\r\n                        infiniteCount = _.options.slidesToShow;\r\n                    }\r\n\r\n                    for (i = _.slideCount; i > (_.slideCount -\r\n                        infiniteCount); i -= 1) {\r\n                        slideIndex = i - 1;\r\n                        $(_.$slides[slideIndex]).clone(true).attr('id', '')\r\n                            .attr('data-slick-index', slideIndex - _.slideCount)\r\n                            .prependTo(_.$slideTrack).addClass('slick-cloned');\r\n                    }\r\n                    for (i = 0; i < infiniteCount + _.slideCount; i += 1) {\r\n                        slideIndex = i;\r\n                        $(_.$slides[slideIndex]).clone(true).attr('id', '')\r\n                            .attr('data-slick-index', slideIndex + _.slideCount)\r\n                            .appendTo(_.$slideTrack).addClass('slick-cloned');\r\n                    }\r\n                    _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {\r\n                        $(this).attr('id', '');\r\n                    });\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.interrupt = function (toggle) {\r\n\r\n            var _ = this;\r\n\r\n            if (!toggle) {\r\n                _.autoPlay();\r\n            }\r\n            _.interrupted = toggle;\r\n\r\n        };\r\n\r\n        Slick.prototype.selectHandler = function (event) {\r\n\r\n            var _ = this;\r\n\r\n            var targetElement =\r\n                $(event.target).is('.slick-slide') ?\r\n                    $(event.target) :\r\n                    $(event.target).parents('.slick-slide');\r\n\r\n            var index = parseInt(targetElement.attr('data-slick-index'));\r\n\r\n            if (!index) index = 0;\r\n\r\n            if (_.slideCount <= _.options.slidesToShow) {\r\n\r\n                _.slideHandler(index, false, true);\r\n                return;\r\n\r\n            }\r\n\r\n            _.slideHandler(index);\r\n\r\n        };\r\n\r\n        Slick.prototype.slideHandler = function (index, sync, dontAnimate) {\r\n\r\n            var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\r\n                _ = this, navTarget;\r\n\r\n            sync = sync || false;\r\n\r\n            if (_.animating === true && _.options.waitForAnimate === true) {\r\n                return;\r\n            }\r\n\r\n            if (_.options.fade === true && _.currentSlide === index) {\r\n                return;\r\n            }\r\n\r\n            if (sync === false) {\r\n                _.asNavFor(index);\r\n            }\r\n\r\n            targetSlide = index;\r\n            targetLeft = _.getLeft(targetSlide);\r\n            slideLeft = _.getLeft(_.currentSlide);\r\n\r\n            _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\r\n\r\n            if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\r\n                if (_.options.fade === false) {\r\n                    targetSlide = _.currentSlide;\r\n                    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\r\n                        _.animateSlide(slideLeft, function () {\r\n                            _.postSlide(targetSlide);\r\n                        });\r\n                    } else {\r\n                        _.postSlide(targetSlide);\r\n                    }\r\n                }\r\n                return;\r\n            } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\r\n                if (_.options.fade === false) {\r\n                    targetSlide = _.currentSlide;\r\n                    if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\r\n                        _.animateSlide(slideLeft, function () {\r\n                            _.postSlide(targetSlide);\r\n                        });\r\n                    } else {\r\n                        _.postSlide(targetSlide);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (_.options.autoplay) {\r\n                clearInterval(_.autoPlayTimer);\r\n            }\r\n\r\n            if (targetSlide < 0) {\r\n                if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n                    animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\r\n                } else {\r\n                    animSlide = _.slideCount + targetSlide;\r\n                }\r\n            } else if (targetSlide >= _.slideCount) {\r\n                if (_.slideCount % _.options.slidesToScroll !== 0) {\r\n                    animSlide = 0;\r\n                } else {\r\n                    animSlide = targetSlide - _.slideCount;\r\n                }\r\n            } else {\r\n                animSlide = targetSlide;\r\n            }\r\n\r\n            _.animating = true;\r\n\r\n            _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\r\n\r\n            oldSlide = _.currentSlide;\r\n            _.currentSlide = animSlide;\r\n\r\n            _.setSlideClasses(_.currentSlide);\r\n\r\n            if (_.options.asNavFor) {\r\n\r\n                navTarget = _.getNavTarget();\r\n                navTarget = navTarget.slick('getSlick');\r\n\r\n                if (navTarget.slideCount <= navTarget.options.slidesToShow) {\r\n                    navTarget.setSlideClasses(_.currentSlide);\r\n                }\r\n\r\n            }\r\n\r\n            _.updateDots();\r\n            _.updateArrows();\r\n\r\n            if (_.options.fade === true) {\r\n                if (dontAnimate !== true) {\r\n\r\n                    _.fadeSlideOut(oldSlide);\r\n\r\n                    _.fadeSlide(animSlide, function () {\r\n                        _.postSlide(animSlide);\r\n                    });\r\n\r\n                } else {\r\n                    _.postSlide(animSlide);\r\n                }\r\n                _.animateHeight();\r\n                return;\r\n            }\r\n\r\n            if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\r\n                _.animateSlide(targetLeft, function () {\r\n                    _.postSlide(animSlide);\r\n                });\r\n            } else {\r\n                _.postSlide(animSlide);\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.startLoad = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n                _.$prevArrow.hide();\r\n                _.$nextArrow.hide();\r\n\r\n            }\r\n\r\n            if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\r\n\r\n                _.$dots.hide();\r\n\r\n            }\r\n\r\n            _.$slider.addClass('slick-loading');\r\n\r\n        };\r\n\r\n        Slick.prototype.swipeDirection = function () {\r\n\r\n            var xDist, yDist, r, swipeAngle, _ = this;\r\n\r\n            xDist = _.touchObject.startX - _.touchObject.curX;\r\n            yDist = _.touchObject.startY - _.touchObject.curY;\r\n            r = Math.atan2(yDist, xDist);\r\n\r\n            swipeAngle = Math.round(r * 180 / Math.PI);\r\n            if (swipeAngle < 0) {\r\n                swipeAngle = 360 - Math.abs(swipeAngle);\r\n            }\r\n\r\n            if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\r\n                return (_.options.rtl === false ? 'left' : 'right');\r\n            }\r\n            if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\r\n                return (_.options.rtl === false ? 'left' : 'right');\r\n            }\r\n            if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\r\n                return (_.options.rtl === false ? 'right' : 'left');\r\n            }\r\n            if (_.options.verticalSwiping === true) {\r\n                if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\r\n                    return 'down';\r\n                } else {\r\n                    return 'up';\r\n                }\r\n            }\r\n\r\n            return 'vertical';\r\n\r\n        };\r\n\r\n        Slick.prototype.swipeEnd = function (event) {\r\n\r\n            var _ = this,\r\n                slideCount,\r\n                direction;\r\n\r\n            _.dragging = false;\r\n            _.swiping = false;\r\n\r\n            if (_.scrolling) {\r\n                _.scrolling = false;\r\n                return false;\r\n            }\r\n\r\n            _.interrupted = false;\r\n            _.shouldClick = (_.touchObject.swipeLength > 10) ? false : true;\r\n\r\n            if (_.touchObject.curX === undefined) {\r\n                return false;\r\n            }\r\n\r\n            if (_.touchObject.edgeHit === true) {\r\n                _.$slider.trigger('edge', [_, _.swipeDirection()]);\r\n            }\r\n\r\n            if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {\r\n\r\n                direction = _.swipeDirection();\r\n\r\n                switch (direction) {\r\n\r\n                    case 'left':\r\n                    case 'down':\r\n\r\n                        slideCount =\r\n                            _.options.swipeToSlide ?\r\n                                _.checkNavigable(_.currentSlide + _.getSlideCount()) :\r\n                                _.currentSlide + _.getSlideCount();\r\n\r\n                        _.currentDirection = 0;\r\n\r\n                        break;\r\n\r\n                    case 'right':\r\n                    case 'up':\r\n\r\n                        slideCount =\r\n                            _.options.swipeToSlide ?\r\n                                _.checkNavigable(_.currentSlide - _.getSlideCount()) :\r\n                                _.currentSlide - _.getSlideCount();\r\n\r\n                        _.currentDirection = 1;\r\n\r\n                        break;\r\n\r\n                    default:\r\n\r\n\r\n                }\r\n\r\n                if (direction != 'vertical') {\r\n\r\n                    _.slideHandler(slideCount);\r\n                    _.touchObject = {};\r\n                    _.$slider.trigger('swipe', [_, direction]);\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (_.touchObject.startX !== _.touchObject.curX) {\r\n\r\n                    _.slideHandler(_.currentSlide);\r\n                    _.touchObject = {};\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.swipeHandler = function (event) {\r\n\r\n            var _ = this;\r\n\r\n            if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\r\n                return;\r\n            } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\r\n                return;\r\n            }\r\n\r\n            _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\r\n                event.originalEvent.touches.length : 1;\r\n\r\n            _.touchObject.minSwipe = _.listWidth / _.options\r\n                .touchThreshold;\r\n\r\n            if (_.options.verticalSwiping === true) {\r\n                _.touchObject.minSwipe = _.listHeight / _.options\r\n                    .touchThreshold;\r\n            }\r\n\r\n            switch (event.data.action) {\r\n\r\n                case 'start':\r\n                    _.swipeStart(event);\r\n                    break;\r\n\r\n                case 'move':\r\n                    _.swipeMove(event);\r\n                    break;\r\n\r\n                case 'end':\r\n                    _.swipeEnd(event);\r\n                    break;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.swipeMove = function (event) {\r\n\r\n            var _ = this,\r\n                edgeWasHit = false,\r\n                curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;\r\n\r\n            touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\r\n\r\n            if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\r\n                return false;\r\n            }\r\n\r\n            curLeft = _.getLeft(_.currentSlide);\r\n\r\n            _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\r\n            _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\r\n\r\n            _.touchObject.swipeLength = Math.round(Math.sqrt(\r\n                Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\r\n\r\n            verticalSwipeLength = Math.round(Math.sqrt(\r\n                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\r\n\r\n            if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\r\n                _.scrolling = true;\r\n                return false;\r\n            }\r\n\r\n            if (_.options.verticalSwiping === true) {\r\n                _.touchObject.swipeLength = verticalSwipeLength;\r\n            }\r\n\r\n            swipeDirection = _.swipeDirection();\r\n\r\n            if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\r\n                _.swiping = true;\r\n                event.preventDefault();\r\n            }\r\n\r\n            positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\r\n            if (_.options.verticalSwiping === true) {\r\n                positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\r\n            }\r\n\r\n\r\n            swipeLength = _.touchObject.swipeLength;\r\n\r\n            _.touchObject.edgeHit = false;\r\n\r\n            if (_.options.infinite === false) {\r\n                if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\r\n                    swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\r\n                    _.touchObject.edgeHit = true;\r\n                }\r\n            }\r\n\r\n            if (_.options.vertical === false) {\r\n                _.swipeLeft = curLeft + swipeLength * positionOffset;\r\n            } else {\r\n                _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\r\n            }\r\n            if (_.options.verticalSwiping === true) {\r\n                _.swipeLeft = curLeft + swipeLength * positionOffset;\r\n            }\r\n\r\n            if (_.options.fade === true || _.options.touchMove === false) {\r\n                return false;\r\n            }\r\n\r\n            if (_.animating === true) {\r\n                _.swipeLeft = null;\r\n                return false;\r\n            }\r\n\r\n            _.setCSS(_.swipeLeft);\r\n\r\n        };\r\n\r\n        Slick.prototype.swipeStart = function (event) {\r\n\r\n            var _ = this,\r\n                touches;\r\n\r\n            _.interrupted = true;\r\n\r\n            if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\r\n                _.touchObject = {};\r\n                return false;\r\n            }\r\n\r\n            if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\r\n                touches = event.originalEvent.touches[0];\r\n            }\r\n\r\n            _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\r\n            _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\r\n\r\n            _.dragging = true;\r\n\r\n        };\r\n\r\n        Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.$slidesCache !== null) {\r\n\r\n                _.unload();\r\n\r\n                _.$slideTrack.children(this.options.slide).detach();\r\n\r\n                _.$slidesCache.appendTo(_.$slideTrack);\r\n\r\n                _.reinit();\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.unload = function () {\r\n\r\n            var _ = this;\r\n\r\n            $('.slick-cloned', _.$slider).remove();\r\n\r\n            if (_.$dots) {\r\n                _.$dots.remove();\r\n            }\r\n\r\n            if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\r\n                _.$prevArrow.remove();\r\n            }\r\n\r\n            if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\r\n                _.$nextArrow.remove();\r\n            }\r\n\r\n            _.$slides\r\n                .removeClass('slick-slide slick-active slick-visible slick-current')\r\n                .attr('aria-hidden', 'true')\r\n                .css('width', '');\r\n\r\n        };\r\n\r\n        Slick.prototype.unslick = function (fromBreakpoint) {\r\n\r\n            var _ = this;\r\n            _.$slider.trigger('unslick', [_, fromBreakpoint]);\r\n            _.destroy();\r\n\r\n        };\r\n\r\n        Slick.prototype.updateArrows = function () {\r\n\r\n            var _ = this,\r\n                centerOffset;\r\n\r\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\r\n\r\n            if (_.options.arrows === true &&\r\n                _.slideCount > _.options.slidesToShow &&\r\n                !_.options.infinite) {\r\n\r\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n                if (_.currentSlide === 0) {\r\n\r\n                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n                    _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n                } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\r\n\r\n                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n                } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\r\n\r\n                    _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\r\n                    _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.updateDots = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.$dots !== null) {\r\n\r\n                _.$dots\r\n                    .find('li')\r\n                    .removeClass('slick-active')\r\n                    .end();\r\n\r\n                _.$dots\r\n                    .find('li')\r\n                    .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\r\n                    .addClass('slick-active');\r\n\r\n            }\r\n\r\n        };\r\n\r\n        Slick.prototype.visibility = function () {\r\n\r\n            var _ = this;\r\n\r\n            if (_.options.autoplay) {\r\n\r\n                if (document[_.hidden]) {\r\n\r\n                    _.interrupted = true;\r\n\r\n                } else {\r\n\r\n                    _.interrupted = false;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n        $.fn.slick = function () {\r\n            var _ = this,\r\n                opt = arguments[0],\r\n                args = Array.prototype.slice.call(arguments, 1),\r\n                l = _.length,\r\n                i,\r\n                ret;\r\n            for (i = 0; i < l; i++) {\r\n                if (typeof opt == 'object' || typeof opt == 'undefined')\r\n                    _[i].slick = new Slick(_[i], opt);\r\n                else\r\n                    ret = _[i].slick[opt].apply(_[i].slick, args);\r\n                if (typeof ret != 'undefined') return ret;\r\n            }\r\n            return _;\r\n        };\r\n\r\n    }));\r\n\n\n//# sourceURL=webpack://gulp/./src/js/app.js?");

/***/ }),

/***/ "./src/js/slick.js":
/*!*************************!*\
  !*** ./src/js/slick.js ***!
  \*************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.8.0\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\n/* global window, document, define, jQuery, setInterval, clearInterval */\n;(function(factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n\n}(function($) {\n    'use strict';\n    var Slick = window.Slick || {};\n\n    Slick = (function() {\n\n        var instanceUid = 0;\n\n        function Slick(element, settings) {\n\n            var _ = this, dataSettings;\n\n            _.defaults = {\n                accessibility: true,\n                adaptiveHeight: false,\n                appendArrows: $(element),\n                appendDots: $(element),\n                arrows: true,\n                asNavFor: null,\n                prevArrow: '<button class=\"slick-prev\" aria-label=\"Previous\" type=\"button\">Previous</button>',\n                nextArrow: '<button class=\"slick-next\" aria-label=\"Next\" type=\"button\">Next</button>',\n                autoplay: false,\n                autoplaySpeed: 3000,\n                centerMode: false,\n                centerPadding: '50px',\n                cssEase: 'ease',\n                customPaging: function(slider, i) {\n                    return $('<button type=\"button\" />').text(i + 1);\n                },\n                dots: false,\n                dotsClass: 'slick-dots',\n                draggable: true,\n                easing: 'linear',\n                edgeFriction: 0.35,\n                fade: false,\n                focusOnSelect: false,\n                focusOnChange: false,\n                infinite: true,\n                initialSlide: 0,\n                lazyLoad: 'ondemand',\n                mobileFirst: false,\n                pauseOnHover: true,\n                pauseOnFocus: true,\n                pauseOnDotsHover: false,\n                respondTo: 'window',\n                responsive: null,\n                rows: 1,\n                rtl: false,\n                slide: '',\n                slidesPerRow: 1,\n                slidesToShow: 1,\n                slidesToScroll: 1,\n                speed: 500,\n                swipe: true,\n                swipeToSlide: false,\n                touchMove: true,\n                touchThreshold: 5,\n                useCSS: true,\n                useTransform: true,\n                variableWidth: false,\n                vertical: false,\n                verticalSwiping: false,\n                waitForAnimate: true,\n                zIndex: 1000\n            };\n\n            _.initials = {\n                animating: false,\n                dragging: false,\n                autoPlayTimer: null,\n                currentDirection: 0,\n                currentLeft: null,\n                currentSlide: 0,\n                direction: 1,\n                $dots: null,\n                listWidth: null,\n                listHeight: null,\n                loadIndex: 0,\n                $nextArrow: null,\n                $prevArrow: null,\n                scrolling: false,\n                slideCount: null,\n                slideWidth: null,\n                $slideTrack: null,\n                $slides: null,\n                sliding: false,\n                slideOffset: 0,\n                swipeLeft: null,\n                swiping: false,\n                $list: null,\n                touchObject: {},\n                transformsEnabled: false,\n                unslicked: false\n            };\n\n            $.extend(_, _.initials);\n\n            _.activeBreakpoint = null;\n            _.animType = null;\n            _.animProp = null;\n            _.breakpoints = [];\n            _.breakpointSettings = [];\n            _.cssTransitions = false;\n            _.focussed = false;\n            _.interrupted = false;\n            _.hidden = 'hidden';\n            _.paused = true;\n            _.positionProp = null;\n            _.respondTo = null;\n            _.rowCount = 1;\n            _.shouldClick = true;\n            _.$slider = $(element);\n            _.$slidesCache = null;\n            _.transformType = null;\n            _.transitionType = null;\n            _.visibilityChange = 'visibilitychange';\n            _.windowWidth = 0;\n            _.windowTimer = null;\n\n            dataSettings = $(element).data('slick') || {};\n\n            _.options = $.extend({}, _.defaults, settings, dataSettings);\n\n            _.currentSlide = _.options.initialSlide;\n\n            _.originalSettings = _.options;\n\n            if (typeof document.mozHidden !== 'undefined') {\n                _.hidden = 'mozHidden';\n                _.visibilityChange = 'mozvisibilitychange';\n            } else if (typeof document.webkitHidden !== 'undefined') {\n                _.hidden = 'webkitHidden';\n                _.visibilityChange = 'webkitvisibilitychange';\n            }\n\n            _.autoPlay = $.proxy(_.autoPlay, _);\n            _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n            _.changeSlide = $.proxy(_.changeSlide, _);\n            _.clickHandler = $.proxy(_.clickHandler, _);\n            _.selectHandler = $.proxy(_.selectHandler, _);\n            _.setPosition = $.proxy(_.setPosition, _);\n            _.swipeHandler = $.proxy(_.swipeHandler, _);\n            _.dragHandler = $.proxy(_.dragHandler, _);\n            _.keyHandler = $.proxy(_.keyHandler, _);\n\n            _.instanceUid = instanceUid++;\n\n            // A simple way to check for HTML strings\n            // Strict HTML recognition (must start with <)\n            // Extracted from jQuery v1.11 source\n            _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n\n            _.registerBreakpoints();\n            _.init(true);\n\n        }\n\n        return Slick;\n\n    }());\n\n    Slick.prototype.activateADA = function() {\n        var _ = this;\n\n        _.$slideTrack.find('.slick-active').attr({\n            'aria-hidden': 'false'\n        }).find('a, input, button, select').attr({\n            'tabindex': '0'\n        });\n\n    };\n\n    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            addBefore = index;\n            index = null;\n        } else if (index < 0 || (index >= _.slideCount)) {\n            return false;\n        }\n\n        _.unload();\n\n        if (typeof(index) === 'number') {\n            if (index === 0 && _.$slides.length === 0) {\n                $(markup).appendTo(_.$slideTrack);\n            } else if (addBefore) {\n                $(markup).insertBefore(_.$slides.eq(index));\n            } else {\n                $(markup).insertAfter(_.$slides.eq(index));\n            }\n        } else {\n            if (addBefore === true) {\n                $(markup).prependTo(_.$slideTrack);\n            } else {\n                $(markup).appendTo(_.$slideTrack);\n            }\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slides.each(function(index, element) {\n            $(element).attr('data-slick-index', index);\n        });\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.animateHeight = function() {\n        var _ = this;\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.animate({\n                height: targetHeight\n            }, _.options.speed);\n        }\n    };\n\n    Slick.prototype.animateSlide = function(targetLeft, callback) {\n\n        var animProps = {},\n            _ = this;\n\n        _.animateHeight();\n\n        if (_.options.rtl === true && _.options.vertical === false) {\n            targetLeft = -targetLeft;\n        }\n        if (_.transformsEnabled === false) {\n            if (_.options.vertical === false) {\n                _.$slideTrack.animate({\n                    left: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            } else {\n                _.$slideTrack.animate({\n                    top: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            }\n\n        } else {\n\n            if (_.cssTransitions === false) {\n                if (_.options.rtl === true) {\n                    _.currentLeft = -(_.currentLeft);\n                }\n                $({\n                    animStart: _.currentLeft\n                }).animate({\n                    animStart: targetLeft\n                }, {\n                    duration: _.options.speed,\n                    easing: _.options.easing,\n                    step: function(now) {\n                        now = Math.ceil(now);\n                        if (_.options.vertical === false) {\n                            animProps[_.animType] = 'translate(' +\n                                now + 'px, 0px)';\n                            _.$slideTrack.css(animProps);\n                        } else {\n                            animProps[_.animType] = 'translate(0px,' +\n                                now + 'px)';\n                            _.$slideTrack.css(animProps);\n                        }\n                    },\n                    complete: function() {\n                        if (callback) {\n                            callback.call();\n                        }\n                    }\n                });\n\n            } else {\n\n                _.applyTransition();\n                targetLeft = Math.ceil(targetLeft);\n\n                if (_.options.vertical === false) {\n                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n                } else {\n                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n                }\n                _.$slideTrack.css(animProps);\n\n                if (callback) {\n                    setTimeout(function() {\n\n                        _.disableTransition();\n\n                        callback.call();\n                    }, _.options.speed);\n                }\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.getNavTarget = function() {\n\n        var _ = this,\n            asNavFor = _.options.asNavFor;\n\n        if ( asNavFor && asNavFor !== null ) {\n            asNavFor = $(asNavFor).not(_.$slider);\n        }\n\n        return asNavFor;\n\n    };\n\n    Slick.prototype.asNavFor = function(index) {\n\n        var _ = this,\n            asNavFor = _.getNavTarget();\n\n        if ( asNavFor !== null && typeof asNavFor === 'object' ) {\n            asNavFor.each(function() {\n                var target = $(this).slick('getSlick');\n                if(!target.unslicked) {\n                    target.slideHandler(index, true);\n                }\n            });\n        }\n\n    };\n\n    Slick.prototype.applyTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        if (_.options.fade === false) {\n            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n        } else {\n            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n        }\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.autoPlay = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        if ( _.slideCount > _.options.slidesToShow ) {\n            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );\n        }\n\n    };\n\n    Slick.prototype.autoPlayClear = function() {\n\n        var _ = this;\n\n        if (_.autoPlayTimer) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n    };\n\n    Slick.prototype.autoPlayIterator = function() {\n\n        var _ = this,\n            slideTo = _.currentSlide + _.options.slidesToScroll;\n\n        if ( !_.paused && !_.interrupted && !_.focussed ) {\n\n            if ( _.options.infinite === false ) {\n\n                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {\n                    _.direction = 0;\n                }\n\n                else if ( _.direction === 0 ) {\n\n                    slideTo = _.currentSlide - _.options.slidesToScroll;\n\n                    if ( _.currentSlide - 1 === 0 ) {\n                        _.direction = 1;\n                    }\n\n                }\n\n            }\n\n            _.slideHandler( slideTo );\n\n        }\n\n    };\n\n    Slick.prototype.buildArrows = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true ) {\n\n            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n            if( _.slideCount > _.options.slidesToShow ) {\n\n                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n                if (_.htmlExpr.test(_.options.prevArrow)) {\n                    _.$prevArrow.prependTo(_.options.appendArrows);\n                }\n\n                if (_.htmlExpr.test(_.options.nextArrow)) {\n                    _.$nextArrow.appendTo(_.options.appendArrows);\n                }\n\n                if (_.options.infinite !== true) {\n                    _.$prevArrow\n                        .addClass('slick-disabled')\n                        .attr('aria-disabled', 'true');\n                }\n\n            } else {\n\n                _.$prevArrow.add( _.$nextArrow )\n\n                    .addClass('slick-hidden')\n                    .attr({\n                        'aria-disabled': 'true',\n                        'tabindex': '-1'\n                    });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.buildDots = function() {\n\n        var _ = this,\n            i, dot;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$slider.addClass('slick-dotted');\n\n            dot = $('<ul />').addClass(_.options.dotsClass);\n\n            for (i = 0; i <= _.getDotCount(); i += 1) {\n                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n            }\n\n            _.$dots = dot.appendTo(_.options.appendDots);\n\n            _.$dots.find('li').first().addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.buildOut = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slider\n                .children( _.options.slide + ':not(.slick-cloned)')\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        _.$slides.each(function(index, element) {\n            $(element)\n                .attr('data-slick-index', index)\n                .data('originalStyling', $(element).attr('style') || '');\n        });\n\n        _.$slider.addClass('slick-slider');\n\n        _.$slideTrack = (_.slideCount === 0) ?\n            $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\n            _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n\n        _.$list = _.$slideTrack.wrap(\n            '<div class=\"slick-list\"/>').parent();\n        _.$slideTrack.css('opacity', 0);\n\n        if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n            _.options.slidesToScroll = 1;\n        }\n\n        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n        _.setupInfinite();\n\n        _.buildArrows();\n\n        _.buildDots();\n\n        _.updateDots();\n\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        if (_.options.draggable === true) {\n            _.$list.addClass('draggable');\n        }\n\n    };\n\n    Slick.prototype.buildRows = function() {\n\n        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;\n\n        newSlides = document.createDocumentFragment();\n        originalSlides = _.$slider.children();\n\n        if(_.options.rows > 0) {\n\n            slidesPerSection = _.options.slidesPerRow * _.options.rows;\n            numOfSlides = Math.ceil(\n                originalSlides.length / slidesPerSection\n            );\n\n            for(a = 0; a < numOfSlides; a++){\n                var slide = document.createElement('div');\n                for(b = 0; b < _.options.rows; b++) {\n                    var row = document.createElement('div');\n                    for(c = 0; c < _.options.slidesPerRow; c++) {\n                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\n                        if (originalSlides.get(target)) {\n                            row.appendChild(originalSlides.get(target));\n                        }\n                    }\n                    slide.appendChild(row);\n                }\n                newSlides.appendChild(slide);\n            }\n\n            _.$slider.empty().append(newSlides);\n            _.$slider.children().children().children()\n                .css({\n                    'width':(100 / _.options.slidesPerRow) + '%',\n                    'display': 'inline-block'\n                });\n\n        }\n\n    };\n\n    Slick.prototype.checkResponsive = function(initial, forceUpdate) {\n\n        var _ = this,\n            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\n        var sliderWidth = _.$slider.width();\n        var windowWidth = window.innerWidth || $(window).width();\n\n        if (_.respondTo === 'window') {\n            respondToWidth = windowWidth;\n        } else if (_.respondTo === 'slider') {\n            respondToWidth = sliderWidth;\n        } else if (_.respondTo === 'min') {\n            respondToWidth = Math.min(windowWidth, sliderWidth);\n        }\n\n        if ( _.options.responsive &&\n            _.options.responsive.length &&\n            _.options.responsive !== null) {\n\n            targetBreakpoint = null;\n\n            for (breakpoint in _.breakpoints) {\n                if (_.breakpoints.hasOwnProperty(breakpoint)) {\n                    if (_.originalSettings.mobileFirst === false) {\n                        if (respondToWidth < _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    } else {\n                        if (respondToWidth > _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    }\n                }\n            }\n\n            if (targetBreakpoint !== null) {\n                if (_.activeBreakpoint !== null) {\n                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n                        _.activeBreakpoint =\n                            targetBreakpoint;\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                            _.unslick(targetBreakpoint);\n                        } else {\n                            _.options = $.extend({}, _.originalSettings,\n                                _.breakpointSettings[\n                                    targetBreakpoint]);\n                            if (initial === true) {\n                                _.currentSlide = _.options.initialSlide;\n                            }\n                            _.refresh(initial);\n                        }\n                        triggerBreakpoint = targetBreakpoint;\n                    }\n                } else {\n                    _.activeBreakpoint = targetBreakpoint;\n                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                        _.unslick(targetBreakpoint);\n                    } else {\n                        _.options = $.extend({}, _.originalSettings,\n                            _.breakpointSettings[\n                                targetBreakpoint]);\n                        if (initial === true) {\n                            _.currentSlide = _.options.initialSlide;\n                        }\n                        _.refresh(initial);\n                    }\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            } else {\n                if (_.activeBreakpoint !== null) {\n                    _.activeBreakpoint = null;\n                    _.options = _.originalSettings;\n                    if (initial === true) {\n                        _.currentSlide = _.options.initialSlide;\n                    }\n                    _.refresh(initial);\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            }\n\n            // only trigger breakpoints during an actual break. not on initialize.\n            if( !initial && triggerBreakpoint !== false ) {\n                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n            }\n        }\n\n    };\n\n    Slick.prototype.changeSlide = function(event, dontAnimate) {\n\n        var _ = this,\n            $target = $(event.currentTarget),\n            indexOffset, slideOffset, unevenOffset;\n\n        // If target is a link, prevent default action.\n        if($target.is('a')) {\n            event.preventDefault();\n        }\n\n        // If target is not the <li> element (ie: a child), find the <li>.\n        if(!$target.is('li')) {\n            $target = $target.closest('li');\n        }\n\n        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\n        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n        switch (event.data.message) {\n\n            case 'previous':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'next':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'index':\n                var index = event.data.index === 0 ? 0 :\n                    event.data.index || $target.index() * _.options.slidesToScroll;\n\n                _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n                $target.children().trigger('focus');\n                break;\n\n            default:\n                return;\n        }\n\n    };\n\n    Slick.prototype.checkNavigable = function(index) {\n\n        var _ = this,\n            navigables, prevNavigable;\n\n        navigables = _.getNavigableIndexes();\n        prevNavigable = 0;\n        if (index > navigables[navigables.length - 1]) {\n            index = navigables[navigables.length - 1];\n        } else {\n            for (var n in navigables) {\n                if (index < navigables[n]) {\n                    index = prevNavigable;\n                    break;\n                }\n                prevNavigable = navigables[n];\n            }\n        }\n\n        return index;\n    };\n\n    Slick.prototype.cleanUpEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots && _.$dots !== null) {\n\n            $('li', _.$dots)\n                .off('click.slick', _.changeSlide)\n                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n            if (_.options.accessibility === true) {\n                _.$dots.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$slider.off('focus.slick blur.slick');\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);\n                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);\n            }\n        }\n\n        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n        _.$list.off('click.slick', _.clickHandler);\n\n        $(document).off(_.visibilityChange, _.visibility);\n\n        _.cleanUpSlideEvents();\n\n        if (_.options.accessibility === true) {\n            _.$list.off('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n        }\n\n        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n\n        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n\n        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n\n        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n\n    };\n\n    Slick.prototype.cleanUpSlideEvents = function() {\n\n        var _ = this;\n\n        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n    };\n\n    Slick.prototype.cleanUpRows = function() {\n\n        var _ = this, originalSlides;\n\n        if(_.options.rows > 0) {\n            originalSlides = _.$slides.children().children();\n            originalSlides.removeAttr('style');\n            _.$slider.empty().append(originalSlides);\n        }\n\n    };\n\n    Slick.prototype.clickHandler = function(event) {\n\n        var _ = this;\n\n        if (_.shouldClick === false) {\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n    };\n\n    Slick.prototype.destroy = function(refresh) {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        _.touchObject = {};\n\n        _.cleanUpEvents();\n\n        $('.slick-cloned', _.$slider).detach();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if ( _.$prevArrow && _.$prevArrow.length ) {\n\n            _.$prevArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.prevArrow )) {\n                _.$prevArrow.remove();\n            }\n        }\n\n        if ( _.$nextArrow && _.$nextArrow.length ) {\n\n            _.$nextArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.nextArrow )) {\n                _.$nextArrow.remove();\n            }\n        }\n\n\n        if (_.$slides) {\n\n            _.$slides\n                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')\n                .removeAttr('aria-hidden')\n                .removeAttr('data-slick-index')\n                .each(function(){\n                    $(this).attr('style', $(this).data('originalStyling'));\n                });\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slideTrack.detach();\n\n            _.$list.detach();\n\n            _.$slider.append(_.$slides);\n        }\n\n        _.cleanUpRows();\n\n        _.$slider.removeClass('slick-slider');\n        _.$slider.removeClass('slick-initialized');\n        _.$slider.removeClass('slick-dotted');\n\n        _.unslicked = true;\n\n        if(!refresh) {\n            _.$slider.trigger('destroy', [_]);\n        }\n\n    };\n\n    Slick.prototype.disableTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        transition[_.transitionType] = '';\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.fadeSlide = function(slideIndex, callback) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).css({\n                zIndex: _.options.zIndex\n            });\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 1\n            }, _.options.speed, _.options.easing, callback);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 1,\n                zIndex: _.options.zIndex\n            });\n\n            if (callback) {\n                setTimeout(function() {\n\n                    _.disableTransition(slideIndex);\n\n                    callback.call();\n                }, _.options.speed);\n            }\n\n        }\n\n    };\n\n    Slick.prototype.fadeSlideOut = function(slideIndex) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            }, _.options.speed, _.options.easing);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            });\n\n        }\n\n    };\n\n    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {\n\n        var _ = this;\n\n        if (filter !== null) {\n\n            _.$slidesCache = _.$slides;\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.focusHandler = function() {\n\n        var _ = this;\n\n        _.$slider\n            .off('focus.slick blur.slick')\n            .on('focus.slick blur.slick', '*', function(event) {\n\n            event.stopImmediatePropagation();\n            var $sf = $(this);\n\n            setTimeout(function() {\n\n                if( _.options.pauseOnFocus ) {\n                    _.focussed = $sf.is(':focus');\n                    _.autoPlay();\n                }\n\n            }, 0);\n\n        });\n    };\n\n    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\n\n        var _ = this;\n        return _.currentSlide;\n\n    };\n\n    Slick.prototype.getDotCount = function() {\n\n        var _ = this;\n\n        var breakPoint = 0;\n        var counter = 0;\n        var pagerQty = 0;\n\n        if (_.options.infinite === true) {\n            if (_.slideCount <= _.options.slidesToShow) {\n                 ++pagerQty;\n            } else {\n                while (breakPoint < _.slideCount) {\n                    ++pagerQty;\n                    breakPoint = counter + _.options.slidesToScroll;\n                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n                }\n            }\n        } else if (_.options.centerMode === true) {\n            pagerQty = _.slideCount;\n        } else if(!_.options.asNavFor) {\n            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n        }else {\n            while (breakPoint < _.slideCount) {\n                ++pagerQty;\n                breakPoint = counter + _.options.slidesToScroll;\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n            }\n        }\n\n        return pagerQty - 1;\n\n    };\n\n    Slick.prototype.getLeft = function(slideIndex) {\n\n        var _ = this,\n            targetLeft,\n            verticalHeight,\n            verticalOffset = 0,\n            targetSlide,\n            coef;\n\n        _.slideOffset = 0;\n        verticalHeight = _.$slides.first().outerHeight(true);\n\n        if (_.options.infinite === true) {\n            if (_.slideCount > _.options.slidesToShow) {\n                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\n                coef = -1\n\n                if (_.options.vertical === true && _.options.centerMode === true) {\n                    if (_.options.slidesToShow === 2) {\n                        coef = -1.5;\n                    } else if (_.options.slidesToShow === 1) {\n                        coef = -2\n                    }\n                }\n                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;\n            }\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n                    if (slideIndex > _.slideCount) {\n                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\n                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\n                    } else {\n                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\n                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\n                    }\n                }\n            }\n        } else {\n            if (slideIndex + _.options.slidesToShow > _.slideCount) {\n                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\n                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\n            }\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = 0;\n            verticalOffset = 0;\n        }\n\n        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);\n        } else if (_.options.centerMode === true && _.options.infinite === true) {\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n        } else if (_.options.centerMode === true) {\n            _.slideOffset = 0;\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n        }\n\n        if (_.options.vertical === false) {\n            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\n        } else {\n            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\n        }\n\n        if (_.options.variableWidth === true) {\n\n            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n            } else {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n            }\n\n            if (_.options.rtl === true) {\n                if (targetSlide[0]) {\n                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                } else {\n                    targetLeft =  0;\n                }\n            } else {\n                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n            }\n\n            if (_.options.centerMode === true) {\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n                } else {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n                }\n\n                if (_.options.rtl === true) {\n                    if (targetSlide[0]) {\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                    } else {\n                        targetLeft =  0;\n                    }\n                } else {\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n                }\n\n                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n            }\n        }\n\n        return targetLeft;\n\n    };\n\n    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\n\n        var _ = this;\n\n        return _.options[option];\n\n    };\n\n    Slick.prototype.getNavigableIndexes = function() {\n\n        var _ = this,\n            breakPoint = 0,\n            counter = 0,\n            indexes = [],\n            max;\n\n        if (_.options.infinite === false) {\n            max = _.slideCount;\n        } else {\n            breakPoint = _.options.slidesToScroll * -1;\n            counter = _.options.slidesToScroll * -1;\n            max = _.slideCount * 2;\n        }\n\n        while (breakPoint < max) {\n            indexes.push(breakPoint);\n            breakPoint = counter + _.options.slidesToScroll;\n            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n\n        return indexes;\n\n    };\n\n    Slick.prototype.getSlick = function() {\n\n        return this;\n\n    };\n\n    Slick.prototype.getSlideCount = function() {\n\n        var _ = this,\n            slidesTraversed, swipedSlide, centerOffset;\n\n        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n        if (_.options.swipeToSlide === true) {\n            _.$slideTrack.find('.slick-slide').each(function(index, slide) {\n                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            });\n\n            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n\n            return slidesTraversed;\n\n        } else {\n            return _.options.slidesToScroll;\n        }\n\n    };\n\n    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'index',\n                index: parseInt(slide)\n            }\n        }, dontAnimate);\n\n    };\n\n    Slick.prototype.init = function(creation) {\n\n        var _ = this;\n\n        if (!$(_.$slider).hasClass('slick-initialized')) {\n\n            $(_.$slider).addClass('slick-initialized');\n\n            _.buildRows();\n            _.buildOut();\n            _.setProps();\n            _.startLoad();\n            _.loadSlider();\n            _.initializeEvents();\n            _.updateArrows();\n            _.updateDots();\n            _.checkResponsive(true);\n            _.focusHandler();\n\n        }\n\n        if (creation) {\n            _.$slider.trigger('init', [_]);\n        }\n\n        if (_.options.accessibility === true) {\n            _.initADA();\n        }\n\n        if ( _.options.autoplay ) {\n\n            _.paused = false;\n            _.autoPlay();\n\n        }\n\n    };\n\n    Slick.prototype.initADA = function() {\n        var _ = this,\n                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),\n                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {\n                    return (val >= 0) && (val < _.slideCount);\n                });\n\n        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n            'aria-hidden': 'true',\n            'tabindex': '-1'\n        }).find('a, input, button, select').attr({\n            'tabindex': '-1'\n        });\n\n        if (_.$dots !== null) {\n            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\n                var slideControlIndex = tabControlIndexes.indexOf(i);\n\n                $(this).attr({\n                    'role': 'tabpanel',\n                    'id': 'slick-slide' + _.instanceUid + i,\n                    'tabindex': -1\n                });\n\n                if (slideControlIndex !== -1) {\n                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex\n                   if ($('#' + ariaButtonControl).length) {\n                     $(this).attr({\n                         'aria-describedby': ariaButtonControl\n                     });\n                   }\n                }\n            });\n\n            _.$dots.attr('role', 'tablist').find('li').each(function(i) {\n                var mappedSlideIndex = tabControlIndexes[i];\n\n                $(this).attr({\n                    'role': 'presentation'\n                });\n\n                $(this).find('button').first().attr({\n                    'role': 'tab',\n                    'id': 'slick-slide-control' + _.instanceUid + i,\n                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,\n                    'aria-label': (i + 1) + ' of ' + numDotGroups,\n                    'aria-selected': null,\n                    'tabindex': '-1'\n                });\n\n            }).eq(_.currentSlide).find('button').attr({\n                'aria-selected': 'true',\n                'tabindex': '0'\n            }).end();\n        }\n\n        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {\n          if (_.options.focusOnChange) {\n            _.$slides.eq(i).attr({'tabindex': '0'});\n          } else {\n            _.$slides.eq(i).removeAttr('tabindex');\n          }\n        }\n\n        _.activateADA();\n\n    };\n\n    Slick.prototype.initArrowEvents = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'previous'\n               }, _.changeSlide);\n            _.$nextArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'next'\n               }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$prevArrow.on('keydown.slick', _.keyHandler);\n                _.$nextArrow.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n    };\n\n    Slick.prototype.initDotEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n            $('li', _.$dots).on('click.slick', {\n                message: 'index'\n            }, _.changeSlide);\n\n            if (_.options.accessibility === true) {\n                _.$dots.on('keydown.slick', _.keyHandler);\n            }\n        }\n\n        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {\n\n            $('li', _.$dots)\n                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initSlideEvents = function() {\n\n        var _ = this;\n\n        if ( _.options.pauseOnHover ) {\n\n            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initializeEvents = function() {\n\n        var _ = this;\n\n        _.initArrowEvents();\n\n        _.initDotEvents();\n        _.initSlideEvents();\n\n        _.$list.on('touchstart.slick mousedown.slick', {\n            action: 'start'\n        }, _.swipeHandler);\n        _.$list.on('touchmove.slick mousemove.slick', {\n            action: 'move'\n        }, _.swipeHandler);\n        _.$list.on('touchend.slick mouseup.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n        _.$list.on('touchcancel.slick mouseleave.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n\n        _.$list.on('click.slick', _.clickHandler);\n\n        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n        if (_.options.accessibility === true) {\n            _.$list.on('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n\n        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n\n        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n\n        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n        $(_.setPosition);\n\n    };\n\n    Slick.prototype.initUI = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.show();\n            _.$nextArrow.show();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.show();\n\n        }\n\n    };\n\n    Slick.prototype.keyHandler = function(event) {\n\n        var _ = this;\n         //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n            if (event.keyCode === 37 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'next' :  'previous'\n                    }\n                });\n            } else if (event.keyCode === 39 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'previous' : 'next'\n                    }\n                });\n            }\n        }\n\n    };\n\n    Slick.prototype.lazyLoad = function() {\n\n        var _ = this,\n            loadRange, cloneRange, rangeStart, rangeEnd;\n\n        function loadImages(imagesScope) {\n\n            $('img[data-lazy]', imagesScope).each(function() {\n\n                var image = $(this),\n                    imageSource = $(this).attr('data-lazy'),\n                    imageSrcSet = $(this).attr('data-srcset'),\n                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),\n                    imageToLoad = document.createElement('img');\n\n                imageToLoad.onload = function() {\n\n                    image\n                        .animate({ opacity: 0 }, 100, function() {\n\n                            if (imageSrcSet) {\n                                image\n                                    .attr('srcset', imageSrcSet );\n\n                                if (imageSizes) {\n                                    image\n                                        .attr('sizes', imageSizes );\n                                }\n                            }\n\n                            image\n                                .attr('src', imageSource)\n                                .animate({ opacity: 1 }, 200, function() {\n                                    image\n                                        .removeAttr('data-lazy data-srcset data-sizes')\n                                        .removeClass('slick-loading');\n                                });\n                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n                        });\n\n                };\n\n                imageToLoad.onerror = function() {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                };\n\n                imageToLoad.src = imageSource;\n\n            });\n\n        }\n\n        if (_.options.centerMode === true) {\n            if (_.options.infinite === true) {\n                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n                rangeEnd = rangeStart + _.options.slidesToShow + 2;\n            } else {\n                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n            }\n        } else {\n            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n            if (_.options.fade === true) {\n                if (rangeStart > 0) rangeStart--;\n                if (rangeEnd <= _.slideCount) rangeEnd++;\n            }\n        }\n\n        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n\n        if (_.options.lazyLoad === 'anticipated') {\n            var prevSlide = rangeStart - 1,\n                nextSlide = rangeEnd,\n                $slides = _.$slider.find('.slick-slide');\n\n            for (var i = 0; i < _.options.slidesToScroll; i++) {\n                if (prevSlide < 0) prevSlide = _.slideCount - 1;\n                loadRange = loadRange.add($slides.eq(prevSlide));\n                loadRange = loadRange.add($slides.eq(nextSlide));\n                prevSlide--;\n                nextSlide++;\n            }\n        }\n\n        loadImages(loadRange);\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-slide');\n            loadImages(cloneRange);\n        } else\n        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n            loadImages(cloneRange);\n        } else if (_.currentSlide === 0) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n            loadImages(cloneRange);\n        }\n\n    };\n\n    Slick.prototype.loadSlider = function() {\n\n        var _ = this;\n\n        _.setPosition();\n\n        _.$slideTrack.css({\n            opacity: 1\n        });\n\n        _.$slider.removeClass('slick-loading');\n\n        _.initUI();\n\n        if (_.options.lazyLoad === 'progressive') {\n            _.progressiveLazyLoad();\n        }\n\n    };\n\n    Slick.prototype.next = Slick.prototype.slickNext = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'next'\n            }\n        });\n\n    };\n\n    Slick.prototype.orientationChange = function() {\n\n        var _ = this;\n\n        _.checkResponsive();\n        _.setPosition();\n\n    };\n\n    Slick.prototype.pause = Slick.prototype.slickPause = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n        _.paused = true;\n\n    };\n\n    Slick.prototype.play = Slick.prototype.slickPlay = function() {\n\n        var _ = this;\n\n        _.autoPlay();\n        _.options.autoplay = true;\n        _.paused = false;\n        _.focussed = false;\n        _.interrupted = false;\n\n    };\n\n    Slick.prototype.postSlide = function(index) {\n\n        var _ = this;\n\n        if( !_.unslicked ) {\n\n            _.$slider.trigger('afterChange', [_, index]);\n\n            _.animating = false;\n\n            if (_.slideCount > _.options.slidesToShow) {\n                _.setPosition();\n            }\n\n            _.swipeLeft = null;\n\n            if ( _.options.autoplay ) {\n                _.autoPlay();\n            }\n\n            if (_.options.accessibility === true) {\n                _.initADA();\n\n                if (_.options.focusOnChange) {\n                    var $currentSlide = $(_.$slides.get(_.currentSlide));\n                    $currentSlide.attr('tabindex', 0).focus();\n                }\n            }\n\n        }\n\n    };\n\n    Slick.prototype.prev = Slick.prototype.slickPrev = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'previous'\n            }\n        });\n\n    };\n\n    Slick.prototype.preventDefault = function(event) {\n\n        event.preventDefault();\n\n    };\n\n    Slick.prototype.progressiveLazyLoad = function( tryCount ) {\n\n        tryCount = tryCount || 1;\n\n        var _ = this,\n            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),\n            image,\n            imageSource,\n            imageSrcSet,\n            imageSizes,\n            imageToLoad;\n\n        if ( $imgsToLoad.length ) {\n\n            image = $imgsToLoad.first();\n            imageSource = image.attr('data-lazy');\n            imageSrcSet = image.attr('data-srcset');\n            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');\n            imageToLoad = document.createElement('img');\n\n            imageToLoad.onload = function() {\n\n                if (imageSrcSet) {\n                    image\n                        .attr('srcset', imageSrcSet );\n\n                    if (imageSizes) {\n                        image\n                            .attr('sizes', imageSizes );\n                    }\n                }\n\n                image\n                    .attr( 'src', imageSource )\n                    .removeAttr('data-lazy data-srcset data-sizes')\n                    .removeClass('slick-loading');\n\n                if ( _.options.adaptiveHeight === true ) {\n                    _.setPosition();\n                }\n\n                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);\n                _.progressiveLazyLoad();\n\n            };\n\n            imageToLoad.onerror = function() {\n\n                if ( tryCount < 3 ) {\n\n                    /**\n                     * try to load the image 3 times,\n                     * leave a slight delay so we don't get\n                     * servers blocking the request.\n                     */\n                    setTimeout( function() {\n                        _.progressiveLazyLoad( tryCount + 1 );\n                    }, 500 );\n\n                } else {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                    _.progressiveLazyLoad();\n\n                }\n\n            };\n\n            imageToLoad.src = imageSource;\n\n        } else {\n\n            _.$slider.trigger('allImagesLoaded', [ _ ]);\n\n        }\n\n    };\n\n    Slick.prototype.refresh = function( initializing ) {\n\n        var _ = this, currentSlide, lastVisibleIndex;\n\n        lastVisibleIndex = _.slideCount - _.options.slidesToShow;\n\n        // in non-infinite sliders, we don't want to go past the\n        // last visible index.\n        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {\n            _.currentSlide = lastVisibleIndex;\n        }\n\n        // if less slides than to show, go to start.\n        if ( _.slideCount <= _.options.slidesToShow ) {\n            _.currentSlide = 0;\n\n        }\n\n        currentSlide = _.currentSlide;\n\n        _.destroy(true);\n\n        $.extend(_, _.initials, { currentSlide: currentSlide });\n\n        _.init();\n\n        if( !initializing ) {\n\n            _.changeSlide({\n                data: {\n                    message: 'index',\n                    index: currentSlide\n                }\n            }, false);\n\n        }\n\n    };\n\n    Slick.prototype.registerBreakpoints = function() {\n\n        var _ = this, breakpoint, currentBreakpoint, l,\n            responsiveSettings = _.options.responsive || null;\n\n        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {\n\n            _.respondTo = _.options.respondTo || 'window';\n\n            for ( breakpoint in responsiveSettings ) {\n\n                l = _.breakpoints.length-1;\n\n                if (responsiveSettings.hasOwnProperty(breakpoint)) {\n                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\n\n                    // loop through the breakpoints and cut out any existing\n                    // ones with the same breakpoint number, we don't want dupes.\n                    while( l >= 0 ) {\n                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {\n                            _.breakpoints.splice(l,1);\n                        }\n                        l--;\n                    }\n\n                    _.breakpoints.push(currentBreakpoint);\n                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n\n                }\n\n            }\n\n            _.breakpoints.sort(function(a, b) {\n                return ( _.options.mobileFirst ) ? a-b : b-a;\n            });\n\n        }\n\n    };\n\n    Slick.prototype.reinit = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slideTrack\n                .children(_.options.slide)\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n            _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.currentSlide = 0;\n        }\n\n        _.registerBreakpoints();\n\n        _.setProps();\n        _.setupInfinite();\n        _.buildArrows();\n        _.updateArrows();\n        _.initArrowEvents();\n        _.buildDots();\n        _.updateDots();\n        _.initDotEvents();\n        _.cleanUpSlideEvents();\n        _.initSlideEvents();\n\n        _.checkResponsive(false, true);\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        _.setPosition();\n        _.focusHandler();\n\n        _.paused = !_.options.autoplay;\n        _.autoPlay();\n\n        _.$slider.trigger('reInit', [_]);\n\n    };\n\n    Slick.prototype.resize = function() {\n\n        var _ = this;\n\n        if ($(window).width() !== _.windowWidth) {\n            clearTimeout(_.windowDelay);\n            _.windowDelay = window.setTimeout(function() {\n                _.windowWidth = $(window).width();\n                _.checkResponsive();\n                if( !_.unslicked ) { _.setPosition(); }\n            }, 50);\n        }\n    };\n\n    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            removeBefore = index;\n            index = removeBefore === true ? 0 : _.slideCount - 1;\n        } else {\n            index = removeBefore === true ? --index : index;\n        }\n\n        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n            return false;\n        }\n\n        _.unload();\n\n        if (removeAll === true) {\n            _.$slideTrack.children().remove();\n        } else {\n            _.$slideTrack.children(this.options.slide).eq(index).remove();\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.setCSS = function(position) {\n\n        var _ = this,\n            positionProps = {},\n            x, y;\n\n        if (_.options.rtl === true) {\n            position = -position;\n        }\n        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n\n        positionProps[_.positionProp] = position;\n\n        if (_.transformsEnabled === false) {\n            _.$slideTrack.css(positionProps);\n        } else {\n            positionProps = {};\n            if (_.cssTransitions === false) {\n                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n                _.$slideTrack.css(positionProps);\n            } else {\n                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n                _.$slideTrack.css(positionProps);\n            }\n        }\n\n    };\n\n    Slick.prototype.setDimensions = function() {\n\n        var _ = this;\n\n        if (_.options.vertical === false) {\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: ('0px ' + _.options.centerPadding)\n                });\n            }\n        } else {\n            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: (_.options.centerPadding + ' 0px')\n                });\n            }\n        }\n\n        _.listWidth = _.$list.width();\n        _.listHeight = _.$list.height();\n\n\n        if (_.options.vertical === false && _.options.variableWidth === false) {\n            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\n\n        } else if (_.options.variableWidth === true) {\n            _.$slideTrack.width(5000 * _.slideCount);\n        } else {\n            _.slideWidth = Math.ceil(_.listWidth);\n            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\n        }\n\n        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n\n    };\n\n    Slick.prototype.setFade = function() {\n\n        var _ = this,\n            targetLeft;\n\n        _.$slides.each(function(index, element) {\n            targetLeft = (_.slideWidth * index) * -1;\n            if (_.options.rtl === true) {\n                $(element).css({\n                    position: 'relative',\n                    right: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            } else {\n                $(element).css({\n                    position: 'relative',\n                    left: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            }\n        });\n\n        _.$slides.eq(_.currentSlide).css({\n            zIndex: _.options.zIndex - 1,\n            opacity: 1\n        });\n\n    };\n\n    Slick.prototype.setHeight = function() {\n\n        var _ = this;\n\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.css('height', targetHeight);\n        }\n\n    };\n\n    Slick.prototype.setOption =\n    Slick.prototype.slickSetOption = function() {\n\n        /**\n         * accepts arguments in format of:\n         *\n         *  - for changing a single option's value:\n         *     .slick(\"setOption\", option, value, refresh )\n         *\n         *  - for changing a set of responsive options:\n         *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n         *\n         *  - for updating multiple values at once (not responsive)\n         *     .slick(\"setOption\", { 'option': value, ... }, refresh )\n         */\n\n        var _ = this, l, item, option, value, refresh = false, type;\n\n        if( $.type( arguments[0] ) === 'object' ) {\n\n            option =  arguments[0];\n            refresh = arguments[1];\n            type = 'multiple';\n\n        } else if ( $.type( arguments[0] ) === 'string' ) {\n\n            option =  arguments[0];\n            value = arguments[1];\n            refresh = arguments[2];\n\n            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {\n\n                type = 'responsive';\n\n            } else if ( typeof arguments[1] !== 'undefined' ) {\n\n                type = 'single';\n\n            }\n\n        }\n\n        if ( type === 'single' ) {\n\n            _.options[option] = value;\n\n\n        } else if ( type === 'multiple' ) {\n\n            $.each( option , function( opt, val ) {\n\n                _.options[opt] = val;\n\n            });\n\n\n        } else if ( type === 'responsive' ) {\n\n            for ( item in value ) {\n\n                if( $.type( _.options.responsive ) !== 'array' ) {\n\n                    _.options.responsive = [ value[item] ];\n\n                } else {\n\n                    l = _.options.responsive.length-1;\n\n                    // loop through the responsive object and splice out duplicates.\n                    while( l >= 0 ) {\n\n                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {\n\n                            _.options.responsive.splice(l,1);\n\n                        }\n\n                        l--;\n\n                    }\n\n                    _.options.responsive.push( value[item] );\n\n                }\n\n            }\n\n        }\n\n        if ( refresh ) {\n\n            _.unload();\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.setPosition = function() {\n\n        var _ = this;\n\n        _.setDimensions();\n\n        _.setHeight();\n\n        if (_.options.fade === false) {\n            _.setCSS(_.getLeft(_.currentSlide));\n        } else {\n            _.setFade();\n        }\n\n        _.$slider.trigger('setPosition', [_]);\n\n    };\n\n    Slick.prototype.setProps = function() {\n\n        var _ = this,\n            bodyStyle = document.body.style;\n\n        _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n        if (_.positionProp === 'top') {\n            _.$slider.addClass('slick-vertical');\n        } else {\n            _.$slider.removeClass('slick-vertical');\n        }\n\n        if (bodyStyle.WebkitTransition !== undefined ||\n            bodyStyle.MozTransition !== undefined ||\n            bodyStyle.msTransition !== undefined) {\n            if (_.options.useCSS === true) {\n                _.cssTransitions = true;\n            }\n        }\n\n        if ( _.options.fade ) {\n            if ( typeof _.options.zIndex === 'number' ) {\n                if( _.options.zIndex < 3 ) {\n                    _.options.zIndex = 3;\n                }\n            } else {\n                _.options.zIndex = _.defaults.zIndex;\n            }\n        }\n\n        if (bodyStyle.OTransform !== undefined) {\n            _.animType = 'OTransform';\n            _.transformType = '-o-transform';\n            _.transitionType = 'OTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.MozTransform !== undefined) {\n            _.animType = 'MozTransform';\n            _.transformType = '-moz-transform';\n            _.transitionType = 'MozTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.webkitTransform !== undefined) {\n            _.animType = 'webkitTransform';\n            _.transformType = '-webkit-transform';\n            _.transitionType = 'webkitTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.msTransform !== undefined) {\n            _.animType = 'msTransform';\n            _.transformType = '-ms-transform';\n            _.transitionType = 'msTransition';\n            if (bodyStyle.msTransform === undefined) _.animType = false;\n        }\n        if (bodyStyle.transform !== undefined && _.animType !== false) {\n            _.animType = 'transform';\n            _.transformType = 'transform';\n            _.transitionType = 'transition';\n        }\n        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\n    };\n\n\n    Slick.prototype.setSlideClasses = function(index) {\n\n        var _ = this,\n            centerOffset, allSlides, indexOffset, remainder;\n\n        allSlides = _.$slider\n            .find('.slick-slide')\n            .removeClass('slick-active slick-center slick-current')\n            .attr('aria-hidden', 'true');\n\n        _.$slides\n            .eq(index)\n            .addClass('slick-current');\n\n        if (_.options.centerMode === true) {\n\n            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;\n\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n            if (_.options.infinite === true) {\n\n                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\n                    _.$slides\n                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    indexOffset = _.options.slidesToShow + index;\n                    allSlides\n                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n                if (index === 0) {\n\n                    allSlides\n                        .eq(allSlides.length - 1 - _.options.slidesToShow)\n                        .addClass('slick-center');\n\n                } else if (index === _.slideCount - 1) {\n\n                    allSlides\n                        .eq(_.options.slidesToShow)\n                        .addClass('slick-center');\n\n                }\n\n            }\n\n            _.$slides\n                .eq(index)\n                .addClass('slick-center');\n\n        } else {\n\n            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\n\n                _.$slides\n                    .slice(index, index + _.options.slidesToShow)\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else if (allSlides.length <= _.options.slidesToShow) {\n\n                allSlides\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else {\n\n                remainder = _.slideCount % _.options.slidesToShow;\n                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\n\n                    allSlides\n                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    allSlides\n                        .slice(indexOffset, indexOffset + _.options.slidesToShow)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n            }\n\n        }\n\n        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {\n            _.lazyLoad();\n        }\n    };\n\n    Slick.prototype.setupInfinite = function() {\n\n        var _ = this,\n            i, slideIndex, infiniteCount;\n\n        if (_.options.fade === true) {\n            _.options.centerMode = false;\n        }\n\n        if (_.options.infinite === true && _.options.fade === false) {\n\n            slideIndex = null;\n\n            if (_.slideCount > _.options.slidesToShow) {\n\n                if (_.options.centerMode === true) {\n                    infiniteCount = _.options.slidesToShow + 1;\n                } else {\n                    infiniteCount = _.options.slidesToShow;\n                }\n\n                for (i = _.slideCount; i > (_.slideCount -\n                        infiniteCount); i -= 1) {\n                    slideIndex = i - 1;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex - _.slideCount)\n                        .prependTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {\n                    slideIndex = i;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex + _.slideCount)\n                        .appendTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {\n                    $(this).attr('id', '');\n                });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.interrupt = function( toggle ) {\n\n        var _ = this;\n\n        if( !toggle ) {\n            _.autoPlay();\n        }\n        _.interrupted = toggle;\n\n    };\n\n    Slick.prototype.selectHandler = function(event) {\n\n        var _ = this;\n\n        var targetElement =\n            $(event.target).is('.slick-slide') ?\n                $(event.target) :\n                $(event.target).parents('.slick-slide');\n\n        var index = parseInt(targetElement.attr('data-slick-index'));\n\n        if (!index) index = 0;\n\n        if (_.slideCount <= _.options.slidesToShow) {\n\n            _.slideHandler(index, false, true);\n            return;\n\n        }\n\n        _.slideHandler(index);\n\n    };\n\n    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {\n\n        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\n            _ = this, navTarget;\n\n        sync = sync || false;\n\n        if (_.animating === true && _.options.waitForAnimate === true) {\n            return;\n        }\n\n        if (_.options.fade === true && _.currentSlide === index) {\n            return;\n        }\n\n        if (sync === false) {\n            _.asNavFor(index);\n        }\n\n        targetSlide = index;\n        targetLeft = _.getLeft(targetSlide);\n        slideLeft = _.getLeft(_.currentSlide);\n\n        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        }\n\n        if ( _.options.autoplay ) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n        if (targetSlide < 0) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\n            } else {\n                animSlide = _.slideCount + targetSlide;\n            }\n        } else if (targetSlide >= _.slideCount) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = 0;\n            } else {\n                animSlide = targetSlide - _.slideCount;\n            }\n        } else {\n            animSlide = targetSlide;\n        }\n\n        _.animating = true;\n\n        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n        oldSlide = _.currentSlide;\n        _.currentSlide = animSlide;\n\n        _.setSlideClasses(_.currentSlide);\n\n        if ( _.options.asNavFor ) {\n\n            navTarget = _.getNavTarget();\n            navTarget = navTarget.slick('getSlick');\n\n            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {\n                navTarget.setSlideClasses(_.currentSlide);\n            }\n\n        }\n\n        _.updateDots();\n        _.updateArrows();\n\n        if (_.options.fade === true) {\n            if (dontAnimate !== true) {\n\n                _.fadeSlideOut(oldSlide);\n\n                _.fadeSlide(animSlide, function() {\n                    _.postSlide(animSlide);\n                });\n\n            } else {\n                _.postSlide(animSlide);\n            }\n            _.animateHeight();\n            return;\n        }\n\n        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {\n            _.animateSlide(targetLeft, function() {\n                _.postSlide(animSlide);\n            });\n        } else {\n            _.postSlide(animSlide);\n        }\n\n    };\n\n    Slick.prototype.startLoad = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.hide();\n            _.$nextArrow.hide();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.hide();\n\n        }\n\n        _.$slider.addClass('slick-loading');\n\n    };\n\n    Slick.prototype.swipeDirection = function() {\n\n        var xDist, yDist, r, swipeAngle, _ = this;\n\n        xDist = _.touchObject.startX - _.touchObject.curX;\n        yDist = _.touchObject.startY - _.touchObject.curY;\n        r = Math.atan2(yDist, xDist);\n\n        swipeAngle = Math.round(r * 180 / Math.PI);\n        if (swipeAngle < 0) {\n            swipeAngle = 360 - Math.abs(swipeAngle);\n        }\n\n        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\n            return (_.options.rtl === false ? 'right' : 'left');\n        }\n        if (_.options.verticalSwiping === true) {\n            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\n                return 'down';\n            } else {\n                return 'up';\n            }\n        }\n\n        return 'vertical';\n\n    };\n\n    Slick.prototype.swipeEnd = function(event) {\n\n        var _ = this,\n            slideCount,\n            direction;\n\n        _.dragging = false;\n        _.swiping = false;\n\n        if (_.scrolling) {\n            _.scrolling = false;\n            return false;\n        }\n\n        _.interrupted = false;\n        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;\n\n        if ( _.touchObject.curX === undefined ) {\n            return false;\n        }\n\n        if ( _.touchObject.edgeHit === true ) {\n            _.$slider.trigger('edge', [_, _.swipeDirection() ]);\n        }\n\n        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {\n\n            direction = _.swipeDirection();\n\n            switch ( direction ) {\n\n                case 'left':\n                case 'down':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :\n                            _.currentSlide + _.getSlideCount();\n\n                    _.currentDirection = 0;\n\n                    break;\n\n                case 'right':\n                case 'up':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :\n                            _.currentSlide - _.getSlideCount();\n\n                    _.currentDirection = 1;\n\n                    break;\n\n                default:\n\n\n            }\n\n            if( direction != 'vertical' ) {\n\n                _.slideHandler( slideCount );\n                _.touchObject = {};\n                _.$slider.trigger('swipe', [_, direction ]);\n\n            }\n\n        } else {\n\n            if ( _.touchObject.startX !== _.touchObject.curX ) {\n\n                _.slideHandler( _.currentSlide );\n                _.touchObject = {};\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.swipeHandler = function(event) {\n\n        var _ = this;\n\n        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\n            return;\n        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n            return;\n        }\n\n        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\n            event.originalEvent.touches.length : 1;\n\n        _.touchObject.minSwipe = _.listWidth / _.options\n            .touchThreshold;\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.minSwipe = _.listHeight / _.options\n                .touchThreshold;\n        }\n\n        switch (event.data.action) {\n\n            case 'start':\n                _.swipeStart(event);\n                break;\n\n            case 'move':\n                _.swipeMove(event);\n                break;\n\n            case 'end':\n                _.swipeEnd(event);\n                break;\n\n        }\n\n    };\n\n    Slick.prototype.swipeMove = function(event) {\n\n        var _ = this,\n            edgeWasHit = false,\n            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;\n\n        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {\n            return false;\n        }\n\n        curLeft = _.getLeft(_.currentSlide);\n\n        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n\n        _.touchObject.swipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n\n        verticalSwipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n\n        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {\n            _.scrolling = true;\n            return false;\n        }\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.swipeLength = verticalSwipeLength;\n        }\n\n        swipeDirection = _.swipeDirection();\n\n        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n            _.swiping = true;\n            event.preventDefault();\n        }\n\n        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n        if (_.options.verticalSwiping === true) {\n            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n        }\n\n\n        swipeLength = _.touchObject.swipeLength;\n\n        _.touchObject.edgeHit = false;\n\n        if (_.options.infinite === false) {\n            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\n                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n                _.touchObject.edgeHit = true;\n            }\n        }\n\n        if (_.options.vertical === false) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        } else {\n            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\n        }\n        if (_.options.verticalSwiping === true) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        }\n\n        if (_.options.fade === true || _.options.touchMove === false) {\n            return false;\n        }\n\n        if (_.animating === true) {\n            _.swipeLeft = null;\n            return false;\n        }\n\n        _.setCSS(_.swipeLeft);\n\n    };\n\n    Slick.prototype.swipeStart = function(event) {\n\n        var _ = this,\n            touches;\n\n        _.interrupted = true;\n\n        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n            _.touchObject = {};\n            return false;\n        }\n\n        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n            touches = event.originalEvent.touches[0];\n        }\n\n        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n\n        _.dragging = true;\n\n    };\n\n    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {\n\n        var _ = this;\n\n        if (_.$slidesCache !== null) {\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.unload = function() {\n\n        var _ = this;\n\n        $('.slick-cloned', _.$slider).remove();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n            _.$prevArrow.remove();\n        }\n\n        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n            _.$nextArrow.remove();\n        }\n\n        _.$slides\n            .removeClass('slick-slide slick-active slick-visible slick-current')\n            .attr('aria-hidden', 'true')\n            .css('width', '');\n\n    };\n\n    Slick.prototype.unslick = function(fromBreakpoint) {\n\n        var _ = this;\n        _.$slider.trigger('unslick', [_, fromBreakpoint]);\n        _.destroy();\n\n    };\n\n    Slick.prototype.updateArrows = function() {\n\n        var _ = this,\n            centerOffset;\n\n        centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n        if ( _.options.arrows === true &&\n            _.slideCount > _.options.slidesToShow &&\n            !_.options.infinite ) {\n\n            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            if (_.currentSlide === 0) {\n\n                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.updateDots = function() {\n\n        var _ = this;\n\n        if (_.$dots !== null) {\n\n            _.$dots\n                .find('li')\n                    .removeClass('slick-active')\n                    .end();\n\n            _.$dots\n                .find('li')\n                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\n                .addClass('slick-active');\n\n        }\n\n    };\n\n    Slick.prototype.visibility = function() {\n\n        var _ = this;\n\n        if ( _.options.autoplay ) {\n\n            if ( document[_.hidden] ) {\n\n                _.interrupted = true;\n\n            } else {\n\n                _.interrupted = false;\n\n            }\n\n        }\n\n    };\n\n    $.fn.slick = function() {\n        var _ = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            l = _.length,\n            i,\n            ret;\n        for (i = 0; i < l; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                _[i].slick = new Slick(_[i], opt);\n            else\n                ret = _[i].slick[opt].apply(_[i].slick, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return _;\n    };\n\n}));\n\n\n//# sourceURL=webpack://gulp/./src/js/slick.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/js/app.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/slick.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;